From 2769ef3054e3aa2630274fd1c302b68a4e8411fd Mon Sep 17 00:00:00 2001
From: Anmol P. Paralkar <anmol@freescale.com>
Date: Fri, 22 Feb 2013 16:54:18 -0800
Subject: [PATCH 31/65] Implement SPE Instructions: { evneg, evabs, evrndw }.

---
 VEX/priv/guest_ppc_toIR.c                |   62 +++++++++++
 memcheck/tests/ppc32/test_spe.c          |  174 ++++++++++++++++++++++++++++++
 memcheck/tests/ppc32/test_spe.h          |    3 +
 memcheck/tests/ppc32/test_spe.stderr.exp |    6 +-
 memcheck/tests/ppc32/test_spe.stdout.exp |    6 +
 regtest-power7-64.log                    |   34 +++---
 6 files changed, 265 insertions(+), 20 deletions(-)

diff --git a/VEX/priv/guest_ppc_toIR.c b/VEX/priv/guest_ppc_toIR.c
index 641b8bb..90c7862 100644
--- a/VEX/priv/guest_ppc_toIR.c
+++ b/VEX/priv/guest_ppc_toIR.c
@@ -12275,6 +12275,38 @@ static IRExpr* spe_count_leading_sign_bits ( IRExpr* src )
                                                              src ) ) );
 }
 
+static IRExpr* spe_neg ( IRExpr* src )
+{
+  return binop ( Iop_Add32,
+                 unop ( Iop_Not32,
+                        src ),
+                 mkU32 ( 0x1 ) );
+}
+
+static IRExpr* spe_abs ( IRExpr* src )
+{
+  IRTemp c0 = newTemp( Ity_I1 );
+  IRTemp b0 = newTemp( Ity_I8 );
+
+  assign( c0, binop( Iop_CmpLT32S,
+                     src,
+                     mkU32 ( 0x0 ) ) );
+  assign( b0, unop( Iop_1Uto8,
+                    mkexpr ( c0 ) ) );
+  return IRExpr_Mux0X ( mkexpr ( b0 ),
+                        src,
+                        spe_neg ( src ) );
+}
+
+static IRExpr* spe_round_word ( IRExpr* src )
+{
+  return binop( Iop_And32,
+                binop( Iop_Add32,
+                       src,
+                       mkU32 ( 0x8000 ) ),
+                mkU32 ( 0xFFFF0000 ) );
+}
+
 static Bool dis_spe_bitwise ( UInt theInstr )
 {
    /* EVX-Form */
@@ -12305,8 +12337,11 @@ static Bool dis_spe_bitwise ( UInt theInstr )
    }
    switch (opc2) {
 
+   case 0x208:
+   case 0x209:
    case 0x20a:
    case 0x20b:
+   case 0x20c:
    case 0x20d:
    case 0x20e:
    case 0x211:
@@ -12317,6 +12352,14 @@ static Bool dis_spe_bitwise ( UInt theInstr )
    case 0x219:
    case 0x21b:
    case 0x21e:
+      if (opc2 == 0x208) {
+        // evabs (Vector Absolute Value, SPEPEM p5-68)
+        DIP( "evabs r%d, r%d\n", rD_addr, rA_addr);
+      }
+      if (opc2 == 0x209) {
+        // evneg (Vector Negate, SPEPEM p5-212)
+        DIP( "evneg r%d, r%d\n", rD_addr, rA_addr);
+      }
       if (opc2 == 0x20a) {
         // evextsb (Vector Extend Sign Byte)
         DIP( "evextsb r%d, r%d, r%d\n", rD_addr, rA_addr, rB_addr);
@@ -12325,6 +12368,10 @@ static Bool dis_spe_bitwise ( UInt theInstr )
         // evextsh (Vector Extend Sign Half Word)
         DIP( "evextsh r%d, r%d, r%d\n", rD_addr, rA_addr, rB_addr);
       }
+      if (opc2 == 0x20c) {
+        // evrndw (Vector Round Word, SPEPEM p5-218)
+        DIP( "evrndw r%d, r%d\n", rD_addr, rA_addr);
+      }
       if (opc2 == 0x20d) {
         // evcntlzw (Vector count Leading Zeros Word)
         DIP( "evcntlzw r%d, r%d, r%d\n", rD_addr, rA_addr, rB_addr);
@@ -12374,6 +12421,14 @@ static Bool dis_spe_bitwise ( UInt theInstr )
       assign ( rBL, unop( Iop_64to32,   mkexpr ( rB ) ) );
       assign ( rBU, unop( Iop_64HIto32, mkexpr ( rB ) ) );
 
+      if (opc2 == 0x208) { // evabs
+        assign ( rDL, spe_abs (  mkexpr ( rAL ) ) );
+        assign ( rDU, spe_abs (  mkexpr ( rAU ) ) );
+      }
+      if (opc2 == 0x209) { // evneg
+        assign ( rDL, spe_neg ( mkexpr ( rAL ) ) );
+        assign ( rDU, spe_neg ( mkexpr ( rAU ) ) );
+      }
       if (opc2 == 0x20a) { // evextsb
         assign ( rDL, unop ( Iop_8Sto32, ( unop ( Iop_32to8, mkexpr ( rAL ) ) ) ) );
         assign ( rDU, unop ( Iop_8Sto32, ( unop ( Iop_32to8, mkexpr ( rAU ) ) ) ) );
@@ -12382,6 +12437,10 @@ static Bool dis_spe_bitwise ( UInt theInstr )
         assign ( rDL, unop ( Iop_16Sto32, ( unop ( Iop_32to16, mkexpr ( rAL ) ) ) ) );
         assign ( rDU, unop ( Iop_16Sto32, ( unop ( Iop_32to16, mkexpr ( rAU ) ) ) ) );
       }
+      if (opc2 == 0x20c) { // evrndw
+        assign ( rDL, spe_round_word ( mkexpr ( rAL ) ) );
+        assign ( rDU, spe_round_word ( mkexpr ( rAU ) ) );
+      }
       if (opc2 == 0x20e) { // evcntlsw
         assign ( rDL, spe_count_leading_sign_bits ( mkexpr ( rAL ) ) );
         assign ( rDU, spe_count_leading_sign_bits ( mkexpr ( rAU ) ) );
@@ -18823,8 +18882,11 @@ DisResult disInstr_PPC_WRK (
          if (!allow_SPE) goto decode_noSPE;
          if (dis_spe_store( theInstr )) goto decode_success;
          goto decode_failure;
+      case 0x208: // evabs
+      case 0x209: // evneg
       case 0x20a: // evextsb
       case 0x20b: // evextsh
+      case 0x20c: // evrndw
       case 0x20d: // evcntlzw
       case 0x20e: // evcntlsw
       case 0x211: // evand
diff --git a/memcheck/tests/ppc32/test_spe.c b/memcheck/tests/ppc32/test_spe.c
index af513bd..c897981 100644
--- a/memcheck/tests/ppc32/test_spe.c
+++ b/memcheck/tests/ppc32/test_spe.c
@@ -6227,6 +6227,169 @@ int __ev_splati_intrinsic(void)
 }
 TEST_SPE_DECL(__ev_splati_intrinsic, "__ev_splati");
 
+int evneg_asm(void)
+{
+  int failures = 0;
+#ifdef __SPE__
+  register __ev64_s32__ regA asm ("30");
+  register __ev64_s32__ regD asm ("29");
+  __ev64_s32__ spl[] = {
+    (__ev64_s32__) { 0x80000000, 0x80000000 },
+  };
+  int i;
+
+  for (i = 0; i < NELTS(rB2s32); i++) {
+    regA = rB2s32[i];
+    asm volatile ("evneg %[d], %[a]" : [d] "=r" (regD) : [a] "r" (regA));
+    VERIFY(regD[0] == NEG(regA[0]));
+    VERIFY(regD[1] == NEG(regA[1]));
+  }
+
+  // Per the accompannying note in the SPEPEM, verify that the negative of the most
+  // negative number is itself:
+  // evneg ((__ev64_s32__) { 0x80000000, 0x80000000 })
+  //  ==   ((__ev64_s32__) { 0x80000000, 0x80000000 })
+  regA = spl[0];
+  asm volatile ("evneg %[d], %[a]" : [d] "=r" (regD) : [a] "r" (regA));
+  VERIFY(regD[0] == regA[0]);
+  VERIFY(regD[1] == regA[1]);
+
+#endif // __SPE__
+  return failures;
+}
+TEST_SPE_DECL(evneg_asm, "evneg");
+
+int __ev_neg_intrinsic(void)
+{
+  int failures = 0;
+#ifdef __SPE__
+  __ev64_opaque__ vd, va;
+  __ev64_s32__ spl[] = {
+    (__ev64_s32__) { 0x80000000, 0x80000000 },
+  };
+  int i;
+
+  for (i = 0; i < NELTS(rA1s32); i += 2) {
+    va = __ev_create_s32 (rA1s32[i+0], rA1s32[i+1]);
+    vd = __ev_neg (va);
+    VERIFY(__ev_get_upper_s32 (vd) == NEG(__ev_get_upper_s32 (va)));
+    VERIFY(__ev_get_lower_s32 (vd) == NEG(__ev_get_lower_s32 (va)));
+  }
+
+  // Per the accompannying note in the SPEPEM, verify that the negative of the most
+  // negative number is itself:
+  // evneg ((__ev64_s32__) { 0x80000000, 0x80000000 })
+  //  ==   ((__ev64_s32__) { 0x80000000, 0x80000000 })
+  va = __ev_create_s32 (__ev_get_upper_s32 (spl[0]), __ev_get_lower_s32 (spl[0]));
+  vd = __ev_neg (va);
+  VERIFY(__ev_get_upper_s32 (vd) == __ev_get_upper_s32 (va));
+  VERIFY(__ev_get_lower_s32 (vd) == __ev_get_lower_s32 (va));
+
+#endif // __SPE__
+  return failures;
+}
+TEST_SPE_DECL(__ev_neg_intrinsic, "__ev_neg");
+
+int evabs_asm(void)
+{
+  int failures = 0;
+#ifdef __SPE__
+  register __ev64_s32__ regA asm ("30");
+  register __ev64_s32__ regD asm ("29");
+  __ev64_s32__ spl[] = {
+    (__ev64_s32__) { 0x80000000, 0x80000000 },
+  };
+  int i;
+
+  for (i = 0; i < NELTS(rB2s32); i++) {
+    regA = rB2s32[i];
+    asm volatile ("evabs %[d], %[a]" : [d] "=r" (regD) : [a] "r" (regA));
+    VERIFY(regD[0] == ABS(regA[0]));
+    VERIFY(regD[1] == ABS(regA[1]));
+  }
+
+  // Per the accompannying note in the SPEPEM, verify that the absolute value of the most
+  // negative number is itself:
+  // evabs ((__ev64_s32__) { 0x80000000, 0x80000000 })
+  //  ==   ((__ev64_s32__) { 0x80000000, 0x80000000 })
+  regA = spl[0];
+  asm volatile ("evabs %[d], %[a]" : [d] "=r" (regD) : [a] "r" (regA));
+  VERIFY(regD[0] == regA[0]);
+  VERIFY(regD[1] == regA[1]);
+
+#endif // __SPE__
+  return failures;
+}
+TEST_SPE_DECL(evabs_asm, "evabs");
+
+int __ev_abs_intrinsic(void)
+{
+  int failures = 0;
+#ifdef __SPE__
+  __ev64_opaque__ vd, va;
+  __ev64_s32__ spl[] = {
+    (__ev64_s32__) { 0x80000000, 0x80000000 },
+  };
+  int i;
+
+  for (i = 0; i < NELTS(rA1s32); i += 2) {
+    va = __ev_create_s32 (rA1s32[i+0], rA1s32[i+1]);
+    vd = __ev_abs (va);
+    VERIFY(__ev_get_upper_s32 (vd) == ABS(__ev_get_upper_s32 (va)));
+    VERIFY(__ev_get_lower_s32 (vd) == ABS(__ev_get_lower_s32 (va)));
+  }
+
+  // Per the accompannying note in the SPEPEM, verify that the absolute value of the most
+  // negative number is itself:
+  // evabs ((__ev64_s32__) { 0x80000000, 0x80000000 })
+  //  ==   ((__ev64_s32__) { 0x80000000, 0x80000000 })
+  va = __ev_create_s32 (__ev_get_upper_s32 (spl[0]), __ev_get_lower_s32 (spl[0]));
+  vd = __ev_abs (va);
+  VERIFY(__ev_get_upper_s32 (vd) == __ev_get_upper_s32 (va));
+  VERIFY(__ev_get_lower_s32 (vd) == __ev_get_lower_s32 (va));
+
+#endif // __SPE__
+  return failures;
+}
+TEST_SPE_DECL(__ev_abs_intrinsic, "__ev_abs");
+
+int evrndw_asm(void)
+{
+  int failures = 0;
+#ifdef __SPE__
+  register __ev64_u32__ regA asm ("30");
+  register __ev64_u32__ regD asm ("29");
+  int i;
+
+  for (i = 0; i < NELTS(rB2u32); i++) {
+    regA = rB2u32[i];
+    asm volatile ("evrndw %[d], %[a]" : [d] "=r" (regD) : [a] "r" (regA));
+    VERIFY(regD[0] == RNDW(regA[0]));
+    VERIFY(regD[1] == RNDW(regA[1]));
+  }
+#endif // __SPE__
+  return failures;
+}
+TEST_SPE_DECL(evrndw_asm, "evrndw");
+
+int __ev_rndw_intrinsic(void)
+{
+  int failures = 0;
+#ifdef __SPE__
+  __ev64_opaque__ vd, va;
+  int i;
+
+  for (i = 0; i < NELTS(rA1u32); i += 2) {
+    va = __ev_create_u32 (rA1u32[i+0], rA1u32[i+1]);
+    vd = __ev_rndw (va);
+    VERIFY(__ev_get_upper_u32 (vd) == RNDW(__ev_get_upper_u32 (va)));
+    VERIFY(__ev_get_lower_u32 (vd) == RNDW(__ev_get_lower_u32 (va)));
+  }
+#endif // __SPE__
+  return failures;
+}
+TEST_SPE_DECL(__ev_rndw_intrinsic, "__ev_rndw");
+
 /* NOTE: To avoid having to remaster the .exp files entirely, add
  *       new test functions /just above/ this comment.
  *       That way, you only need to worry about the test that you
@@ -6329,6 +6492,9 @@ test_t spe_isa_bitwise_operators_test_table = {
     F(evextsh_asm),
     F(evcntlsw_asm),
     F(evcntlzw_asm),
+    F(evneg_asm),
+    F(evabs_asm),
+    F(evrndw_asm),
     NULL
   }
 };
@@ -6466,6 +6632,9 @@ test_t chapter3_spe2pim_intrinsics_tests_table = {
     F(__ev_cntlzw_intrinsic),
     F(__ev_splatfi_intrinsic),
     F(__ev_splati_intrinsic),
+    F(__ev_neg_intrinsic),
+    F(__ev_abs_intrinsic),
+    F(__ev_rndw_intrinsic),
     NULL
   }
 };
@@ -6559,3 +6728,8 @@ int main(void)
 // 17. Get around to: #if TODO
 // 18. We were not able to use __ev_get_s16 (), in __ev_extsh_intrinsic (); see comment in __ev_lwhos_intrinsic ()
 //     Fix this GCC bug, and re-code.
+// 19. In evnot_asm(), need: VERIFY(regD[1] == NOT(regA[1]));
+// 20. For each hex number that you have (randomly generated) as input data,put its base-10 form alongside in comment form
+// 21. Have a dynamic random number generator to be able to to test for literally zillions of values (instead of using
+//     the pre-generated values from the data pools - since all the semantics are already coded and yuou do not depend
+//     upon raw values (ensure that this is so).
diff --git a/memcheck/tests/ppc32/test_spe.h b/memcheck/tests/ppc32/test_spe.h
index 0f80656..f190761 100644
--- a/memcheck/tests/ppc32/test_spe.h
+++ b/memcheck/tests/ppc32/test_spe.h
@@ -5426,6 +5426,9 @@ signed short rD1s16[NELTS(rA1s16)];
 #define NOR(a, b)  (~((a) | (b)))
 #define NOT(a)     (~(a))
 #define ORC(a, b)  ((a) | ~(b))
+#define NEG(a)     (NOT((a)) + 1)
+#define ABS(a)     ((a) >= 0 ? (a) : -(a))
+#define RNDW(a)    (((a) + 0x00008000) & 0xffff0000)
 
 const uint32_t rA1u1_8[] = {
 
diff --git a/memcheck/tests/ppc32/test_spe.stderr.exp b/memcheck/tests/ppc32/test_spe.stderr.exp
index c01d454..50f9e98 100644
--- a/memcheck/tests/ppc32/test_spe.stderr.exp
+++ b/memcheck/tests/ppc32/test_spe.stderr.exp
@@ -5,7 +5,7 @@ Invalid write of size 4
    by 0x........: run (test_spe.h:42)
    by 0x........: run (test_spe.h:48)
    by 0x........: run (test_spe.h:48)
-   by 0x........: main (test_spe.c:6535)
+   by 0x........: main (test_spe.c:6704)
  Address 0x........ is 0 bytes after a block of size 40 alloc'd
    at 0x........: malloc (vg_replace_malloc.c:...)
    by 0x........: vg_quick_start_guide_aux (test_spe.c:26)
@@ -13,7 +13,7 @@ Invalid write of size 4
    by 0x........: run (test_spe.h:42)
    by 0x........: run (test_spe.h:48)
    by 0x........: run (test_spe.h:48)
-   by 0x........: main (test_spe.c:6535)
+   by 0x........: main (test_spe.c:6704)
 
 
 HEAP SUMMARY:
@@ -27,7 +27,7 @@ HEAP SUMMARY:
    by 0x........: run (test_spe.h:42)
    by 0x........: run (test_spe.h:48)
    by 0x........: run (test_spe.h:48)
-   by 0x........: main (test_spe.c:6535)
+   by 0x........: main (test_spe.c:6704)
 
 LEAK SUMMARY:
    definitely lost: 40 bytes in 1 blocks
diff --git a/memcheck/tests/ppc32/test_spe.stdout.exp b/memcheck/tests/ppc32/test_spe.stdout.exp
index adc6e0a..c6c4e1c 100644
--- a/memcheck/tests/ppc32/test_spe.stdout.exp
+++ b/memcheck/tests/ppc32/test_spe.stdout.exp
@@ -65,6 +65,9 @@ SPE Regression Tests: PASS
 ....evextsh: PASS
 ....evcntlsw: PASS
 ....evcntlzw: PASS
+....evneg: PASS
+....evabs: PASS
+....evrndw: PASS
 ...SPE ISA Merge Instructions Tests: PASS
 ....evmergehi: PASS
 ....evmergehilo: PASS
@@ -148,6 +151,9 @@ SPE Regression Tests: PASS
 ....__ev_cntlzw: PASS
 ....__ev_splatfi: PASS
 ....__ev_splati: PASS
+....__ev_neg: PASS
+....__ev_abs: PASS
+....__ev_rndw: PASS
 ..SPE ISA Miscellaneous Tests: PASS
 ...Memory transfer using evldd-evstdd: PASS
 ...Value pool demo: PASS
diff --git a/regtest-power7-64.log b/regtest-power7-64.log
index a660b62..0aa7018 100644
--- a/regtest-power7-64.log
+++ b/regtest-power7-64.log
@@ -484,7 +484,7 @@ gcc -Winline -Wall -Wshadow -g -Wno-long-long  -Wno-pointer-sign -fno-stack-prot
 make[5]: Leaving directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/memcheck/tests/ppc32'
 make  check-local
 make[5]: Entering directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/memcheck/tests/ppc32'
-make[5]: Warning: File `.deps/test_spe.Po' has modification time 74 s in the future
+make[5]: Warning: File `.deps/test_spe.Po' has modification time 75 s in the future
 for f in ; do \
   if [ ! -e $f.dSYM  -o  $f -nt $f.dSYM ] ; then \
       echo "dsymutil $f"; \
@@ -504,7 +504,7 @@ gcc -Winline -Wall -Wshadow -g  -Winline -Wall -Wshadow -g -I../../../include -m
 make[5]: Leaving directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/memcheck/tests/ppc64'
 make  check-local
 make[5]: Entering directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/memcheck/tests/ppc64'
-make[5]: Warning: File `.deps/power_ISA2_05-power_ISA2_05.Po' has modification time 74 s in the future
+make[5]: Warning: File `.deps/power_ISA2_05-power_ISA2_05.Po' has modification time 75 s in the future
 for f in ; do \
   if [ ! -e $f.dSYM  -o  $f -nt $f.dSYM ] ; then \
       echo "dsymutil $f"; \
@@ -551,7 +551,7 @@ gcc -Winline -Wall -Wshadow -g -m64 -Wno-long-long  -Wno-pointer-sign -fno-stack
 make[5]: Leaving directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/memcheck/tests/linux'
 make  check-local
 make[5]: Entering directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/memcheck/tests/linux'
-make[5]: Warning: File `.deps/timerfd-syscall.Po' has modification time 74 s in the future
+make[5]: Warning: File `.deps/timerfd-syscall.Po' has modification time 75 s in the future
 for f in ; do \
   if [ ! -e $f.dSYM  -o  $f -nt $f.dSYM ] ; then \
       echo "dsymutil $f"; \
@@ -605,7 +605,7 @@ gcc -Winline -Wall -Wshadow -g -m64 -fPIC -Wno-long-long  -Wno-pointer-sign -fno
 make[5]: Leaving directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/cachegrind/tests'
 make  check-local
 make[5]: Entering directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/cachegrind/tests'
-make[5]: Warning: File `.deps/myprint_so-myprint.Po' has modification time 74 s in the future
+make[5]: Warning: File `.deps/myprint_so-myprint.Po' has modification time 75 s in the future
 for f in ; do \
   if [ ! -e $f.dSYM  -o  $f -nt $f.dSYM ] ; then \
       echo "dsymutil $f"; \
@@ -656,7 +656,7 @@ gcc -Winline -Wall -Wshadow -g -m64 -Wno-long-long  -Wno-pointer-sign -fno-stack
 make[5]: Leaving directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/callgrind/tests'
 make  check-local
 make[5]: Entering directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/callgrind/tests'
-make[5]: Warning: File `.deps/threads.Po' has modification time 74 s in the future
+make[5]: Warning: File `.deps/threads.Po' has modification time 75 s in the future
 for f in ; do \
   if [ ! -e $f.dSYM  -o  $f -nt $f.dSYM ] ; then \
       echo "dsymutil $f"; \
@@ -1255,7 +1255,7 @@ gcc -Winline -Wall -Wshadow -g -m64 -Wno-long-long  -Wno-pointer-sign -fno-stack
 make[5]: Leaving directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/none/tests/linux'
 make  check-local
 make[5]: Entering directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/none/tests/linux'
-make[5]: Warning: File `.deps/mremap3.Po' has modification time 74 s in the future
+make[5]: Warning: File `.deps/mremap3.Po' has modification time 75 s in the future
 for f in ; do \
   if [ ! -e $f.dSYM  -o  $f -nt $f.dSYM ] ; then \
       echo "dsymutil $f"; \
@@ -1418,7 +1418,7 @@ gcc -Winline -Wall -Wshadow -g -m64 -Wno-long-long  -Wno-pointer-sign -fno-stack
 make[4]: Leaving directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/helgrind/tests'
 make  check-local
 make[4]: Entering directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/helgrind/tests'
-make[4]: Warning: File `.deps/tc24_nonzero_sem.Po' has modification time 73 s in the future
+make[4]: Warning: File `.deps/tc24_nonzero_sem.Po' has modification time 74 s in the future
 for f in ; do \
   if [ ! -e $f.dSYM  -o  $f -nt $f.dSYM ] ; then \
       echo "dsymutil $f"; \
@@ -1628,7 +1628,7 @@ gcc -Winline -Wall -Wshadow -g -m64 -Wextra -Wno-inline -Wno-unused-parameter -W
 make[4]: Leaving directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/drd/tests'
 make  check-local
 make[4]: Entering directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/drd/tests'
-make[4]: Warning: File `.deps/unit_vc-unit_vc.Po' has modification time 68 s in the future
+make[4]: Warning: File `.deps/unit_vc-unit_vc.Po' has modification time 69 s in the future
 for f in ; do \
   if [ ! -e $f.dSYM  -o  $f -nt $f.dSYM ] ; then \
       echo "dsymutil $f"; \
@@ -1759,7 +1759,7 @@ gcc -Winline -Wall -Wshadow -g -Wno-long-long  -Wno-pointer-sign -fno-stack-prot
 make[5]: Leaving directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/exp-bbv/tests/ppc32-linux'
 make  check-local
 make[5]: Entering directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/exp-bbv/tests/ppc32-linux'
-make[5]: Warning: File `.deps/million.Po' has modification time 74 s in the future
+make[5]: Warning: File `.deps/million.Po' has modification time 75 s in the future
 for f in ; do \
   if [ ! -e $f.dSYM  -o  $f -nt $f.dSYM ] ; then \
       echo "dsymutil $f"; \
@@ -1819,7 +1819,7 @@ gcc -Winline -Wall -Wshadow -g -m64 -Wno-long-long  -Wno-pointer-sign -fno-stack
 make[3]: Leaving directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/tests'
 make  check-local
 make[3]: Entering directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/tests'
-make[3]: Warning: File `.deps/x86_amd64_features-x86_amd64_features.Po' has modification time 74 s in the future
+make[3]: Warning: File `.deps/x86_amd64_features-x86_amd64_features.Po' has modification time 75 s in the future
 for f in ; do \
   if [ ! -e $f.dSYM  -o  $f -nt $f.dSYM ] ; then \
       echo "dsymutil $f"; \
@@ -1901,7 +1901,7 @@ gcc -Winline -Wall -Wshadow -g -m64 -Wno-long-long  -Wno-pointer-sign -fno-stack
 make[3]: Leaving directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/gdbserver_tests'
 make  check-local
 make[3]: Entering directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/gdbserver_tests'
-make[3]: Warning: File `.deps/watchpoints.Po' has modification time 74 s in the future
+make[3]: Warning: File `.deps/watchpoints.Po' has modification time 75 s in the future
 for f in ; do \
   if [ ! -e $f.dSYM  -o  $f -nt $f.dSYM ] ; then \
       echo "dsymutil $f"; \
@@ -1980,7 +1980,7 @@ badfree-2trace:  valgrind   --num-callers=2 -q ./badfree
 badfree:         valgrind   -q ./badfree 
 badfree3:        valgrind   -q --fullpath-after=/proj/ppc/DT/labhome/anmol/valgrind-3.8.1/ ./badfree 
 badjump:         valgrind   ./badjump 
-sh: line 1:  6832 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck ./badjump > badjump.stdout.out 2> badjump.stderr.out
+sh: line 1:  5703 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck ./badjump > badjump.stdout.out 2> badjump.stderr.out
 badjump2:        valgrind   -q ./badjump2 
 badloop:         valgrind   -q ./badloop 
 badpoll:         valgrind   -q ./badpoll 
@@ -1997,7 +1997,7 @@ clo_redzone_default: valgrind   --leak-check=no -q ./clo_redzone
 custom-overlap:  valgrind   --leak-check=summary -q ./custom-overlap 
 custom_alloc:    valgrind   -q ./custom_alloc 
 deep-backtrace:  valgrind   -q --num-callers=500 ./deep-backtrace 
-sh: line 1:  7392 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck -q --num-callers=500 ./deep-backtrace > deep-backtrace.stdout.out 2> deep-backtrace.stderr.out
+sh: line 1:  6264 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck -q --num-callers=500 ./deep-backtrace > deep-backtrace.stdout.out 2> deep-backtrace.stderr.out
 deep_templates:  valgrind   -q ./deep_templates 
 describe-block:  valgrind   ./describe-block 
 doublefree:      valgrind   -q ./doublefree 
@@ -2110,7 +2110,7 @@ supp-dir:        valgrind   --suppressions=x86/ ./../../tests/true
 supp1:           valgrind   --suppressions=supp.supp -q ./supp1 
 supp2:           valgrind   --suppressions=supp.supp -q ./supp2 
 supp_unknown:    valgrind   -q --suppressions=supp_unknown.supp ./badjump 
-sh: line 1: 12133 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck -q --suppressions=supp_unknown.supp ./badjump > supp_unknown.stdout.out 2> supp_unknown.stderr.out
+sh: line 1: 11019 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck -q --suppressions=supp_unknown.supp ./badjump > supp_unknown.stdout.out 2> supp_unknown.stderr.out
 *** supp_unknown failed (stderr) ***
 suppfree:        valgrind   --suppressions=suppfree.supp -q ./suppfree 
 test-plo-no:     valgrind   -q ./test-plo 
@@ -2246,7 +2246,7 @@ gxx304:          valgrind   ./gxx304
 ifunc:           (skipping, prereq failed: test -e ifunc)
 -- Running  tests in none/tests/linux ----------------------------------
 blockfault:      valgrind   ./blockfault 
-sh: line 1: 16608 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=none ./blockfault > blockfault.stdout.out 2> blockfault.stderr.out
+sh: line 1: 15497 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=none ./blockfault > blockfault.stdout.out 2> blockfault.stderr.out
 mremap:          valgrind   ./mremap 
 mremap2:         valgrind   ./mremap2 
 mremap3:         valgrind   ./mremap3 
@@ -2412,7 +2412,7 @@ tc20_verifywrap: valgrind   --read-var-info=yes ./tc20_verifywrap
 *** tc20_verifywrap failed (stderr) ***
 tc21_pthonce:    valgrind   --read-var-info=yes ./tc21_pthonce 
 tc22_exit_w_lock: valgrind   ./tc22_exit_w_lock 
-sh: line 1:  1707 Aborted                 (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=helgrind ./tc22_exit_w_lock > tc22_exit_w_lock.stdout.out 2> tc22_exit_w_lock.stderr.out
+sh: line 1:   467 Aborted                 (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=helgrind ./tc22_exit_w_lock > tc22_exit_w_lock.stdout.out 2> tc22_exit_w_lock.stderr.out
 tc23_bogus_condwait: valgrind   ./tc23_bogus_condwait 
 tc24_nonzero_sem: valgrind   --hg-sanity-flags=111111 ./tc24_nonzero_sem 
 -- Finished tests in helgrind/tests ------------------------------------
@@ -2531,7 +2531,7 @@ tc18_semabuse:   valgrind   ./../../helgrind/tests/tc18_semabuse
 tc19_shadowmem:  valgrind   --error-limit=no --read-var-info=yes --show-confl-seg=no --num-callers=3 ./../../helgrind/tests/tc19_shadowmem 
 tc21_pthonce:    valgrind   --num-callers=3 ./../../helgrind/tests/tc21_pthonce 
 tc22_exit_w_lock: valgrind   --num-callers=3 ./../../helgrind/tests/tc22_exit_w_lock 
-sh: line 1:  7056 Aborted                 (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=drd --num-callers=3 ./../../helgrind/tests/tc22_exit_w_lock > tc22_exit_w_lock.stdout.out 2> tc22_exit_w_lock.stderr.out
+sh: line 1:  5940 Aborted                 (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=drd --num-callers=3 ./../../helgrind/tests/tc22_exit_w_lock > tc22_exit_w_lock.stdout.out 2> tc22_exit_w_lock.stderr.out
 tc23_bogus_condwait: valgrind   --num-callers=3 ./../../helgrind/tests/tc23_bogus_condwait 
 tc24_nonzero_sem: valgrind   --read-var-info=yes ./../../helgrind/tests/tc24_nonzero_sem 
 thread_name:     valgrind   --read-var-info=yes --check-stack-var=yes --num-callers=3 ./thread_name 
-- 
1.7.3.4

