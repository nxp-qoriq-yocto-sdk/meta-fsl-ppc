From f775efc189a949f2d47add5af7f3124b8f84ac69 Mon Sep 17 00:00:00 2001
From: Anmol P. Paralkar <anmol@freescale.com>
Date: Mon, 4 Mar 2013 17:42:04 -0800
Subject: [PATCH 37/65] Implement SPE Instructions: { evaddiw, evaddw, evsubifw, evsubfw }.

---
 VEX/priv/guest_ppc_toIR.c                |  114 ++++++++++++++++++++
 memcheck/tests/ppc32/test_spe.c          |  172 ++++++++++++++++++++++++++++++
 memcheck/tests/ppc32/test_spe.stderr.exp |    6 +-
 memcheck/tests/ppc32/test_spe.stdout.exp |    5 +
 regtest-power7-64.log                    |   12 +-
 5 files changed, 300 insertions(+), 9 deletions(-)

diff --git a/VEX/priv/guest_ppc_toIR.c b/VEX/priv/guest_ppc_toIR.c
index 08fd8ec..2b0b082 100644
--- a/VEX/priv/guest_ppc_toIR.c
+++ b/VEX/priv/guest_ppc_toIR.c
@@ -13238,6 +13238,113 @@ static Bool dis_spe_ACC_based_add_insns ( UInt theInstr )
 
   return True;
 }
+
+static Bool dis_spe_add_insns ( UInt theInstr )
+{
+  /* EVX-Form */
+  UChar opc1    = evxOpcode( theInstr );
+  UInt  opc2    = evxXO( theInstr );
+  UChar rD_addr = evxRD( theInstr );
+  UChar rA_addr = evxRA( theInstr );
+  UChar rB_addr = evxRB( theInstr );
+  UChar uimm    = evxRA( theInstr );
+  // Char  simm    = evxRA( theInstr );
+
+  IRTemp rA = newTemp( Ity_I64 );
+  IRTemp rB = newTemp( Ity_I64 );
+
+  IRTemp rAU  = newTemp( Ity_I32 );
+  IRTemp rAL  = newTemp( Ity_I32 );
+  IRTemp rBU  = newTemp( Ity_I32 );
+  IRTemp rBL  = newTemp( Ity_I32 );
+  IRTemp rDU  = newTemp( Ity_I32 );
+  IRTemp rDL  = newTemp( Ity_I32 );
+
+  IRTemp rD = newTemp( Ity_I64 );
+
+  if (opc1 != 0x4) {
+     vex_printf( "dis_spe_add_insns(ppc)(opc1 != 0x4)\n" );
+     return False;
+  }
+
+  switch (opc2) {
+  case 0x200:
+     // evaddw (Vector Add Word, SPEPEM p5-74)
+     DIP( "evaddw r%d, r%d, %d\n", rD_addr, rA_addr, rB_addr );
+     break;
+  case 0x202:
+     // evaddiw (Vector Add Immediate Word, SPEPEM p5-69)
+     DIP( "evaddiw r%d, r%d, %d\n", rD_addr, rB_addr, uimm );
+     break;
+  case 0x204:
+     // evsubfw (Vector Subtract from Word, SPEPEM p5-246)
+     DIP( "evsubfw r%d, r%d, %d\n", rD_addr, rA_addr, rB_addr );
+     break;
+  case 0x206:
+     // evsubifw (Vector Subtract Immediate from Word, SPEPEM p5-247)
+     DIP( "evsubifw r%d, r%d, %d\n", rD_addr, rB_addr, uimm );
+     break;
+  default:
+     return False;
+  }
+
+  assign ( rA, getSPEReg( rA_addr ) );
+  assign ( rB, getSPEReg( rB_addr ) );
+
+  assign ( rAL, unop( Iop_64to32,
+                      mkexpr ( rA ) ) );
+  assign ( rAU, unop( Iop_64HIto32,
+                      mkexpr ( rA ) ) );
+  assign ( rBL, unop( Iop_64to32,
+                      mkexpr ( rB ) ) );
+  assign ( rBU, unop( Iop_64HIto32,
+                      mkexpr ( rB ) ) );
+
+  switch (opc2) {
+  case 0x200: // evaddw
+     assign ( rDL, binop( Iop_Add32,
+                          mkexpr ( rAL ),
+                          mkexpr ( rBL ) ) );
+     assign ( rDU, binop( Iop_Add32,
+                          mkexpr ( rAU ),
+                          mkexpr ( rBU ) ) );
+     break;
+  case 0x202: // evaddiw
+     assign ( rDL, binop( Iop_Add32,
+                          mkexpr ( rBL ),
+                          mkU32  ( uimm ) ) );
+     assign ( rDU, binop( Iop_Add32,
+                          mkexpr ( rBU ),
+                          mkU32  ( uimm ) ) );
+     break;
+  case 0x204: // evsubfw
+     assign ( rDL, binop( Iop_Sub32,
+                          mkexpr ( rBL ),
+                          mkexpr ( rAL ) ) );
+     assign ( rDU, binop( Iop_Sub32,
+                          mkexpr ( rBU ),
+                          mkexpr ( rAU ) ) );
+     break;
+  case 0x206: // evsubifw
+     assign ( rDL, binop( Iop_Sub32,
+                          mkexpr ( rBL ),
+                          mkU32  ( uimm ) ) );
+     assign ( rDU, binop( Iop_Sub32,
+                          mkexpr ( rBU ),
+                          mkU32  ( uimm ) ) );
+     break;
+  default:
+     return False;
+  }
+
+  assign ( rD, binop( Iop_32HLto64,
+                      mkexpr ( rDU ),
+                      mkexpr ( rDL ) ) );
+
+  putSPEReg( rD_addr, mkexpr ( rD ) );
+
+  return True;
+}
 /*------------------------------------------------------------*/
 /*--- AltiVec Instruction Translation                      ---*/
 /*------------------------------------------------------------*/
@@ -19268,6 +19375,13 @@ DisResult disInstr_PPC_WRK (
          if (!allow_SPE) goto decode_noSPE;
          if (dis_spe_store( theInstr )) goto decode_success;
          goto decode_failure;
+      case 0x200: // evaddw
+      case 0x202: // evaddiw
+      case 0x204: // evsubfw
+      case 0x206: // evsubifw
+         if (!allow_SPE) goto decode_noSPE;
+         if (dis_spe_add_insns( theInstr )) goto decode_success;
+         goto decode_failure;
       case 0x208: // evabs
       case 0x209: // evneg
       case 0x20a: // evextsb
diff --git a/memcheck/tests/ppc32/test_spe.c b/memcheck/tests/ppc32/test_spe.c
index 8e69f48..7a259d6 100644
--- a/memcheck/tests/ppc32/test_spe.c
+++ b/memcheck/tests/ppc32/test_spe.c
@@ -7809,6 +7809,164 @@ int evsubfumiaaw_asm(void)
 }
 TEST_SPE_DECL(evsubfumiaaw_asm, "evsubfumiaaw");
 
+int evaddiw_asm(void)
+{
+  int failures = 0;
+#ifdef __SPE__
+  register __ev64_u32__ regB asm ("30");
+  register __ev64_u32__ regD asm ("29");
+  int32_t i;
+
+  for (i = 0; i < NELTS(rB2u32); i++) {
+
+    regB = rB2u32[i];
+
+#define EVADDIW(uimm)                                                               \
+    asm volatile ("evaddiw %[d], %[b], " #uimm : [d] "=r" (regD) : [b] "r" (regB)); \
+    VERIFY(regD[0] == regB[0] + uimm);                                              \
+    VERIFY(regD[1] == regB[1] + uimm);
+
+    EVADDIW(0);
+    EVADDIW(1);
+    EVADDIW(2);
+    EVADDIW(3);
+    EVADDIW(4);
+    EVADDIW(5);
+    EVADDIW(6);
+    EVADDIW(7);
+    EVADDIW(8);
+    EVADDIW(9);
+    EVADDIW(10);
+    EVADDIW(11);
+    EVADDIW(12);
+    EVADDIW(13);
+    EVADDIW(14);
+    EVADDIW(15);
+    EVADDIW(16);
+    EVADDIW(17);
+    EVADDIW(18);
+    EVADDIW(19);
+    EVADDIW(20);
+    EVADDIW(21);
+    EVADDIW(22);
+    EVADDIW(23);
+    EVADDIW(24);
+    EVADDIW(25);
+    EVADDIW(26);
+    EVADDIW(27);
+    EVADDIW(28);
+    EVADDIW(29);
+    EVADDIW(30);
+    EVADDIW(31);
+  }
+#endif // __SPE__
+  return failures;
+}
+TEST_SPE_DECL(evaddiw_asm, "evaddiw");
+
+int evaddw_asm(void)
+{
+  int failures = 0;
+#ifdef __SPE__
+  register __ev64_u32__ regA asm ("30");
+  register __ev64_u32__ regB asm ("29");
+  register __ev64_u32__ regD asm ("28");
+  int32_t i;
+
+  for (i = 0; i < NELTS(rA2u32); i++) {
+
+    regA = rA2u32[i];
+    regB = rB2u32[i];
+
+    asm volatile ("evaddw %[d], %[a], %[b]" : [d] "=r" (regD) : [a] "r" (regA), [b] "r" (regB));
+    VERIFY(regD[0] == regA[0] + regB[0]);
+    VERIFY(regD[1] == regA[1] + regB[1]);
+  }
+
+#endif // __SPE__
+  return failures;
+}
+TEST_SPE_DECL(evaddw_asm, "evaddw");
+
+int evsubifw_asm(void)
+{
+  int failures = 0;
+#ifdef __SPE__
+  register __ev64_u32__ regB asm ("30");
+  register __ev64_u32__ regD asm ("29");
+  int32_t i;
+
+  for (i = 0; i < NELTS(rB2u32); i++) {
+
+    regB = rB2u32[i];
+
+#define EVSUBIFW(uimm)                                                                  \
+    asm volatile ("evsubifw %[d], " #uimm ", %[b]" : [d] "=r" (regD) : [b] "r" (regB)); \
+    VERIFY(regD[0] == regB[0] - uimm);                                                  \
+    VERIFY(regD[1] == regB[1] - uimm);
+
+    EVSUBIFW(0);
+    EVSUBIFW(1);
+    EVSUBIFW(2);
+    EVSUBIFW(3);
+    EVSUBIFW(4);
+    EVSUBIFW(5);
+    EVSUBIFW(6);
+    EVSUBIFW(7);
+    EVSUBIFW(8);
+    EVSUBIFW(9);
+    EVSUBIFW(10);
+    EVSUBIFW(11);
+    EVSUBIFW(12);
+    EVSUBIFW(13);
+    EVSUBIFW(14);
+    EVSUBIFW(15);
+    EVSUBIFW(16);
+    EVSUBIFW(17);
+    EVSUBIFW(18);
+    EVSUBIFW(19);
+    EVSUBIFW(20);
+    EVSUBIFW(21);
+    EVSUBIFW(22);
+    EVSUBIFW(23);
+    EVSUBIFW(24);
+    EVSUBIFW(25);
+    EVSUBIFW(26);
+    EVSUBIFW(27);
+    EVSUBIFW(28);
+    EVSUBIFW(29);
+    EVSUBIFW(30);
+    EVSUBIFW(31);
+  }
+#endif // __SPE__
+  return failures;
+}
+TEST_SPE_DECL(evsubifw_asm, "evsubifw");
+
+int evsubfw_asm(void)
+{
+  int failures = 0;
+#ifdef __SPE__
+  register __ev64_s32__ regA asm ("30");
+  register __ev64_s32__ regB asm ("29");
+  register __ev64_s32__ regD asm ("28");
+  int32_t i;
+
+  for (i = 0; i < NELTS(rA2s32); i++) {
+
+    regA = rA2s32[i];
+    regB = rB2s32[i];
+
+    asm volatile ("evsubfw %[d], %[a], %[b]" : [d] "=r" (regD) : [a] "r" (regA), [b] "r" (regB));
+    VERIFY(regD[0] == regB[0] - regA[0]);
+    VERIFY(regD[1] == regB[1] - regA[1]);
+  }
+
+#endif // __SPE__
+  return failures;
+}
+TEST_SPE_DECL(evsubfw_asm, "evsubfw");
+
 /* NOTE: To avoid having to remaster the .exp files entirely, add
  *       new test functions /just above/ this comment.
  *       That way, you only need to worry about the test that you
@@ -7988,6 +8146,19 @@ test_t spe_isa_ACC_based_add_insns_test_table = {
   }
 };
 
+test_t spe_isa_add_insns_test_table = {
+
+  .type = table,
+  .description = "SPE ISA Add/Subtract Instructions Tests",
+  .table = {
+    F(evaddiw_asm),
+    F(evaddw_asm),
+    F(evsubifw_asm),
+    F(evsubfw_asm),
+    NULL
+  }
+};
+
 test_t spe_isa_insn_test_table = {
 
   .type = table,
@@ -8000,6 +8171,7 @@ test_t spe_isa_insn_test_table = {
     &spe_isa_compare_insns_test_table,
     &spe_isa_select_insns_test_table,
     &spe_isa_ACC_based_add_insns_test_table,
+    &spe_isa_add_insns_test_table,
     NULL
   }
 };
diff --git a/memcheck/tests/ppc32/test_spe.stderr.exp b/memcheck/tests/ppc32/test_spe.stderr.exp
index 802317d..ab92040 100644
--- a/memcheck/tests/ppc32/test_spe.stderr.exp
+++ b/memcheck/tests/ppc32/test_spe.stderr.exp
@@ -5,7 +5,7 @@ Invalid write of size 4
    by 0x........: run (test_spe.h:43)
    by 0x........: run (test_spe.h:49)
    by 0x........: run (test_spe.h:49)
-   by 0x........: main (test_spe.c:8193)
+   by 0x........: main (test_spe.c:8365)
  Address 0x........ is 0 bytes after a block of size 40 alloc'd
    at 0x........: malloc (vg_replace_malloc.c:...)
    by 0x........: vg_quick_start_guide_aux (test_spe.c:26)
@@ -13,7 +13,7 @@ Invalid write of size 4
    by 0x........: run (test_spe.h:43)
    by 0x........: run (test_spe.h:49)
    by 0x........: run (test_spe.h:49)
-   by 0x........: main (test_spe.c:8193)
+   by 0x........: main (test_spe.c:8365)
 
 
 HEAP SUMMARY:
@@ -27,7 +27,7 @@ HEAP SUMMARY:
    by 0x........: run (test_spe.h:43)
    by 0x........: run (test_spe.h:49)
    by 0x........: run (test_spe.h:49)
-   by 0x........: main (test_spe.c:8193)
+   by 0x........: main (test_spe.c:8365)
 
 LEAK SUMMARY:
    definitely lost: 40 bytes in 1 blocks
diff --git a/memcheck/tests/ppc32/test_spe.stdout.exp b/memcheck/tests/ppc32/test_spe.stdout.exp
index 2e969b1..a04fb12 100644
--- a/memcheck/tests/ppc32/test_spe.stdout.exp
+++ b/memcheck/tests/ppc32/test_spe.stdout.exp
@@ -98,6 +98,11 @@ SPE Regression Tests: PASS
 ....evaddumiaaw: PASS
 ....evsubfsmiaaw: PASS
 ....evsubfumiaaw: PASS
+...SPE ISA Add/Subtract Instructions Tests: PASS
+....evaddiw: PASS
+....evaddw: PASS
+....evsubifw: PASS
+....evsubfw: PASS
 ..SPE2PIM Tests: PASS
 ...Chapter 2: High-Level Language Interface: PASS
 ...Chapter 5: Programming Interface Examples: PASS
diff --git a/regtest-power7-64.log b/regtest-power7-64.log
index 6ed8521..fb51db2 100644
--- a/regtest-power7-64.log
+++ b/regtest-power7-64.log
@@ -1980,7 +1980,7 @@ badfree-2trace:  valgrind   --num-callers=2 -q ./badfree
 badfree:         valgrind   -q ./badfree 
 badfree3:        valgrind   -q --fullpath-after=/proj/ppc/DT/labhome/anmol/valgrind-3.8.1/ ./badfree 
 badjump:         valgrind   ./badjump 
-sh: line 1: 10331 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck ./badjump > badjump.stdout.out 2> badjump.stderr.out
+sh: line 1:  7218 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck ./badjump > badjump.stdout.out 2> badjump.stderr.out
 badjump2:        valgrind   -q ./badjump2 
 badloop:         valgrind   -q ./badloop 
 badpoll:         valgrind   -q ./badpoll 
@@ -1997,7 +1997,7 @@ clo_redzone_default: valgrind   --leak-check=no -q ./clo_redzone
 custom-overlap:  valgrind   --leak-check=summary -q ./custom-overlap 
 custom_alloc:    valgrind   -q ./custom_alloc 
 deep-backtrace:  valgrind   -q --num-callers=500 ./deep-backtrace 
-sh: line 1: 10889 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck -q --num-callers=500 ./deep-backtrace > deep-backtrace.stdout.out 2> deep-backtrace.stderr.out
+sh: line 1:  7776 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck -q --num-callers=500 ./deep-backtrace > deep-backtrace.stdout.out 2> deep-backtrace.stderr.out
 deep_templates:  valgrind   -q ./deep_templates 
 describe-block:  valgrind   ./describe-block 
 doublefree:      valgrind   -q ./doublefree 
@@ -2110,7 +2110,7 @@ supp-dir:        valgrind   --suppressions=x86/ ./../../tests/true
 supp1:           valgrind   --suppressions=supp.supp -q ./supp1 
 supp2:           valgrind   --suppressions=supp.supp -q ./supp2 
 supp_unknown:    valgrind   -q --suppressions=supp_unknown.supp ./badjump 
-sh: line 1: 15584 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck -q --suppressions=supp_unknown.supp ./badjump > supp_unknown.stdout.out 2> supp_unknown.stderr.out
+sh: line 1: 12471 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck -q --suppressions=supp_unknown.supp ./badjump > supp_unknown.stdout.out 2> supp_unknown.stderr.out
 *** supp_unknown failed (stderr) ***
 suppfree:        valgrind   --suppressions=suppfree.supp -q ./suppfree 
 test-plo-no:     valgrind   -q ./test-plo 
@@ -2246,7 +2246,7 @@ gxx304:          valgrind   ./gxx304
 ifunc:           (skipping, prereq failed: test -e ifunc)
 -- Running  tests in none/tests/linux ----------------------------------
 blockfault:      valgrind   ./blockfault 
-sh: line 1: 20058 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=none ./blockfault > blockfault.stdout.out 2> blockfault.stderr.out
+sh: line 1: 16939 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=none ./blockfault > blockfault.stdout.out 2> blockfault.stderr.out
 mremap:          valgrind   ./mremap 
 mremap2:         valgrind   ./mremap2 
 mremap3:         valgrind   ./mremap3 
@@ -2412,7 +2412,7 @@ tc20_verifywrap: valgrind   --read-var-info=yes ./tc20_verifywrap
 *** tc20_verifywrap failed (stderr) ***
 tc21_pthonce:    valgrind   --read-var-info=yes ./tc21_pthonce 
 tc22_exit_w_lock: valgrind   ./tc22_exit_w_lock 
-sh: line 1:  5208 Aborted                 (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=helgrind ./tc22_exit_w_lock > tc22_exit_w_lock.stdout.out 2> tc22_exit_w_lock.stderr.out
+sh: line 1:  2090 Aborted                 (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=helgrind ./tc22_exit_w_lock > tc22_exit_w_lock.stdout.out 2> tc22_exit_w_lock.stderr.out
 tc23_bogus_condwait: valgrind   ./tc23_bogus_condwait 
 tc24_nonzero_sem: valgrind   --hg-sanity-flags=111111 ./tc24_nonzero_sem 
 -- Finished tests in helgrind/tests ------------------------------------
@@ -2531,7 +2531,7 @@ tc18_semabuse:   valgrind   ./../../helgrind/tests/tc18_semabuse
 tc19_shadowmem:  valgrind   --error-limit=no --read-var-info=yes --show-confl-seg=no --num-callers=3 ./../../helgrind/tests/tc19_shadowmem 
 tc21_pthonce:    valgrind   --num-callers=3 ./../../helgrind/tests/tc21_pthonce 
 tc22_exit_w_lock: valgrind   --num-callers=3 ./../../helgrind/tests/tc22_exit_w_lock 
-sh: line 1: 10540 Aborted                 (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=drd --num-callers=3 ./../../helgrind/tests/tc22_exit_w_lock > tc22_exit_w_lock.stdout.out 2> tc22_exit_w_lock.stderr.out
+sh: line 1:  7427 Aborted                 (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=drd --num-callers=3 ./../../helgrind/tests/tc22_exit_w_lock > tc22_exit_w_lock.stdout.out 2> tc22_exit_w_lock.stderr.out
 tc23_bogus_condwait: valgrind   --num-callers=3 ./../../helgrind/tests/tc23_bogus_condwait 
 tc24_nonzero_sem: valgrind   --read-var-info=yes ./../../helgrind/tests/tc24_nonzero_sem 
 thread_name:     valgrind   --read-var-info=yes --check-stack-var=yes --num-callers=3 ./thread_name 
-- 
1.7.3.4

