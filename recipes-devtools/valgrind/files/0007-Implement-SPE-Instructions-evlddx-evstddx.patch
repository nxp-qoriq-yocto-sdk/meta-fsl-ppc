From 9f6c00609ba413bf6cead081256861839f21273e Mon Sep 17 00:00:00 2001
From: Anmol P. Paralkar <anmol@freescale.com>
Date: Fri, 25 Jan 2013 09:18:11 -0800
Subject: [PATCH 07/65] Implement SPE Instructions: { evlddx, evstddx }.

---
 VEX/priv/guest_ppc_toIR.c                |   16 +++
 memcheck/tests/ppc32/test_spe.c          |  198 ++++++++++++++++++++++++++++++
 memcheck/tests/ppc32/test_spe.stderr.exp |    6 +-
 memcheck/tests/ppc32/test_spe.stdout.exp |    2 +
 regtest-power7-64.log                    |   20 ++--
 5 files changed, 229 insertions(+), 13 deletions(-)

diff --git a/VEX/priv/guest_ppc_toIR.c b/VEX/priv/guest_ppc_toIR.c
index 1015202..f4e28a3 100644
--- a/VEX/priv/guest_ppc_toIR.c
+++ b/VEX/priv/guest_ppc_toIR.c
@@ -11647,6 +11647,7 @@ static Bool dis_spe_load ( VexAbiInfo* vbi, UInt theInstr )
    UChar opc1    = evxOpcode( theInstr );
    UChar rD_addr = evxRD( theInstr );
    UChar rA_addr = evxRA( theInstr );
+   UChar rB_addr = evxRB( theInstr );
    UChar uimm    = evxRB( theInstr );
    UChar disp    = 0;
    UInt  opc2    = evxXO( theInstr );
@@ -11660,6 +11661,12 @@ static Bool dis_spe_load ( VexAbiInfo* vbi, UInt theInstr )
    }
 
    switch (opc2) {
+   case 0x300:
+      // evlddx (Vector Load Double Word into Double Word Indexed, SPEPEM p5-113)
+      DIP( "evlddx r%d, r%d, r%d\n", rD_addr, rA_addr, rB_addr );
+      assign( EA, ea_rAor0_idxd ( rA_addr, rB_addr ) );
+      putSPEReg( rD_addr, loadBE( Ity_I64, addr_align( mkexpr( EA ), 8 ) ) );
+      break;
    case 0x301:
       // evldd (Vector Load Double of Double, SPEPEM p5-112)
       disp = 8 * uimm;
@@ -11682,6 +11689,7 @@ static Bool dis_spe_store ( UInt theInstr )
    UInt  opc2    = evxXO( theInstr );
    UChar rS_addr = evxRS( theInstr );
    UChar rA_addr = evxRA( theInstr );
+   UChar rB_addr = evxRB( theInstr );
    UChar uimm    = evxRB( theInstr );
    UInt  disp    = 0;
 
@@ -11696,6 +11704,12 @@ static Bool dis_spe_store ( UInt theInstr )
    assign( rS, getSPEReg( rS_addr ) );
 
    switch (opc2) {
+   case 0x320:
+      // evstddx (Vector Store Double of Double Indexed, SPEPEM p5-229)
+      DIP( "evstddx r%d, r%d, r%d\n", rS_addr, rA_addr, rB_addr );
+      assign( EA, ea_rAor0_idxd( rA_addr, rB_addr ) );
+      storeBE( addr_align( mkexpr( EA ), 8 ), mkexpr( rS ) );
+      break;
    case 0x321:
       // evstdd (Vector Store Double of Double, SPEPEM p5-228)
       disp = 8 * uimm;
@@ -17736,10 +17750,12 @@ DisResult disInstr_PPC_WRK (
 #ifdef __SPE__
       opc2 = IFIELD(theInstr, 0, 11);
       switch (opc2) {
+      case 0x300: // evlddx
       case 0x301: // evldd
          if (!allow_SPE) goto decode_noSPE;
          if (dis_spe_load( abiinfo, theInstr )) goto decode_success;
          goto decode_failure;
+      case 0x320: // evstddx
       case 0x321: // evstdd
          if (!allow_SPE) goto decode_noSPE;
          if (dis_spe_store( theInstr )) goto decode_success;
diff --git a/memcheck/tests/ppc32/test_spe.c b/memcheck/tests/ppc32/test_spe.c
index 687a6bb..5f8fa56 100644
--- a/memcheck/tests/ppc32/test_spe.c
+++ b/memcheck/tests/ppc32/test_spe.c
@@ -819,6 +819,200 @@ int get_leaf_count (void)
 }
 TEST_SPE_DECL(get_leaf_count, "Count the number of leaves in a binary tree");
 
+#ifdef __SPE__
+__ev64_u64__ evlddx_asm_src[64] = {
+
+  (__ev64_u64__) { 0x1b8fb34fe81044b1 },
+  (__ev64_u64__) { 0x0a4a591f5b8f8497 },
+  (__ev64_u64__) { 0x00a57506182a59f9 },
+  (__ev64_u64__) { 0x78fe213915f4ca9c },
+  (__ev64_u64__) { 0x4808bd326348bcae },
+  (__ev64_u64__) { 0xbc6a6b892c51b01d },
+  (__ev64_u64__) { 0x2a4d520f29419f9e },
+  (__ev64_u64__) { 0xece64f6b4a39edca },
+  (__ev64_u64__) { 0xb278818cbb1d299b },
+  (__ev64_u64__) { 0x021197d9f2d304e8 },
+  (__ev64_u64__) { 0x01f80b84d9b03412 },
+  (__ev64_u64__) { 0x680483b30cba9c1e },
+  (__ev64_u64__) { 0x9d53d07ace9ea315 },
+  (__ev64_u64__) { 0x4f9620bfc4b7ad55 },
+  (__ev64_u64__) { 0x2bfcc8d727e10222 },
+  (__ev64_u64__) { 0x63c0f3c70c009cd6 },
+  (__ev64_u64__) { 0xc66635a4cc5021e8 },
+  (__ev64_u64__) { 0x5d416b08140732be },
+  (__ev64_u64__) { 0xdb9094474ea04fba },
+  (__ev64_u64__) { 0xf727eb805697c5fe },
+  (__ev64_u64__) { 0x084453eb30bac461 },
+  (__ev64_u64__) { 0x79361c10f2da6463 },
+  (__ev64_u64__) { 0xfc0a1324817b381d },
+  (__ev64_u64__) { 0x4c6bea4f190771fe },
+  (__ev64_u64__) { 0x627f5cbd1aa84af0 },
+  (__ev64_u64__) { 0x6323f32a76672009 },
+  (__ev64_u64__) { 0xafc2447cf9e6b02b },
+  (__ev64_u64__) { 0x5bb45e002b8bcf0f },
+  (__ev64_u64__) { 0x759897fccc6c7033 },
+  (__ev64_u64__) { 0xc8e8ec759a5aafb2 },
+  (__ev64_u64__) { 0xb8929a7965faa8d3 },
+  (__ev64_u64__) { 0xe639f8ec7b53b9b7 },
+  (__ev64_u64__) { 0x25653bd837027e48 },
+  (__ev64_u64__) { 0x8bac19d30acfb5e6 },
+  (__ev64_u64__) { 0x95f48dcde3521a00 },
+  (__ev64_u64__) { 0x6daa3b4f2b87bbd3 },
+  (__ev64_u64__) { 0x2b736f2428a2b9b0 },
+  (__ev64_u64__) { 0xe1afc87fc70a94ef },
+  (__ev64_u64__) { 0x4b0a474600b0db38 },
+  (__ev64_u64__) { 0xf84db8cb500e5743 },
+  (__ev64_u64__) { 0x93564adf48ad9efc },
+  (__ev64_u64__) { 0xd4c8bc4761ba565c },
+  (__ev64_u64__) { 0x886bc0def5c5746f },
+  (__ev64_u64__) { 0xf69db114fb369fa2 },
+  (__ev64_u64__) { 0x18fcffd5735062ac },
+  (__ev64_u64__) { 0x772a2de0b594bbf8 },
+  (__ev64_u64__) { 0x10883d1a81a68ac1 },
+  (__ev64_u64__) { 0xf13b1ad7bf01cc86 },
+  (__ev64_u64__) { 0x764e44f2ef6e0905 },
+  (__ev64_u64__) { 0x70a481e80e521384 },
+  (__ev64_u64__) { 0x278e63feff165f44 },
+  (__ev64_u64__) { 0xa2ac6d34c903d1f1 },
+  (__ev64_u64__) { 0x653f50aa521e0b00 },
+  (__ev64_u64__) { 0x98a906b12eb7d278 },
+  (__ev64_u64__) { 0x79411d622d642425 },
+  (__ev64_u64__) { 0x94730d1662a01b5f },
+  (__ev64_u64__) { 0xe50b8fe1d3b47dd9 },
+  (__ev64_u64__) { 0x86b15f48c057921a },
+  (__ev64_u64__) { 0x079e0e8bc5aa2557 },
+  (__ev64_u64__) { 0x7af52553dbcd1d18 },
+  (__ev64_u64__) { 0xfe343510bdc4dc89 },
+  (__ev64_u64__) { 0x5107ed123527c906 },
+  (__ev64_u64__) { 0xc828f032e071851b },
+  (__ev64_u64__) { 0xa6bb92c486a00207 },
+
+};
+#endif // __SPE__
+
+int evlddx_asm(void)
+{
+  int failures = 0;
+#ifdef __SPE__
+  register void *src_base asm ("30");
+  register __ev64_u64__ vec asm ("29");
+  register int idx asm ("28");
+  register int i asm ("27");
+
+  asm volatile ("lis %[b], evlddx_asm_src@ha" : [b] "=r" (src_base));
+  asm volatile ("addic %[bd], %[bs], evlddx_asm_src@l" : [bd] "=r" (src_base) : [bs] "r" (src_base));
+  VERIFY (src_base == evlddx_asm_src);
+
+  for (i = 0; i < 64; i++) {
+    idx = i * sizeof (__ev64_u64__);
+    asm volatile ("evlddx %[v], %[b], %[i]" : [v] "=r" (vec) : [b] "r" (src_base), [i] "r" (idx));
+    VERIFY (vec[0] == evlddx_asm_src[i][0]);
+  }
+#endif // __SPE__
+  return failures;
+}
+TEST_SPE_DECL(evlddx_asm, "Unit test for evlddx using asm");
+
+#ifdef __SPE__
+__ev64_u64__ evstddx_asm_src[64] = {
+
+  (__ev64_u64__) { 0xdec3d88456c3fc40 },
+  (__ev64_u64__) { 0xbe720bc3771b154e },
+  (__ev64_u64__) { 0x833bcbf3ae8c4c0f },
+  (__ev64_u64__) { 0xa9a2596949543224 },
+  (__ev64_u64__) { 0x8e9ca8ead04e5d37 },
+  (__ev64_u64__) { 0x7134c39e522a34c8 },
+  (__ev64_u64__) { 0xdea7d65919c7475b },
+  (__ev64_u64__) { 0x5d9863f9c28b2ffb },
+  (__ev64_u64__) { 0xa280012e4eb729f3 },
+  (__ev64_u64__) { 0xf0d4fdfc1f8f506b },
+  (__ev64_u64__) { 0xd82d384cf2d2d354 },
+  (__ev64_u64__) { 0x99d022e8b099ddc4 },
+  (__ev64_u64__) { 0x2f026f03f54332a9 },
+  (__ev64_u64__) { 0x84af34a0dac1b00d },
+  (__ev64_u64__) { 0xd6cfb9b12c2234c4 },
+  (__ev64_u64__) { 0x618a828356df1dcd },
+  (__ev64_u64__) { 0x6e70df6b685576cd },
+  (__ev64_u64__) { 0xcef34a707c2d4a0c },
+  (__ev64_u64__) { 0xd8d704809fbe84dc },
+  (__ev64_u64__) { 0xfc7c44d0b3f0fa87 },
+  (__ev64_u64__) { 0x613e1b1534c64b4c },
+  (__ev64_u64__) { 0x48dade5a56120e88 },
+  (__ev64_u64__) { 0x9ac0df694634ab4a },
+  (__ev64_u64__) { 0x3fdac62e9b0b37af },
+  (__ev64_u64__) { 0x6e25e43b79c49958 },
+  (__ev64_u64__) { 0x8103b390c4c66e52 },
+  (__ev64_u64__) { 0x34aeb3affb5b47bc },
+  (__ev64_u64__) { 0xb7739f8d6d756616 },
+  (__ev64_u64__) { 0x9f6dca723d42c69a },
+  (__ev64_u64__) { 0xaf74fa824d3d8c35 },
+  (__ev64_u64__) { 0xf672667dbcc25995 },
+  (__ev64_u64__) { 0x1258b8efc1da491a },
+  (__ev64_u64__) { 0xa99e289dc903d104 },
+  (__ev64_u64__) { 0x866b1039c7e012a6 },
+  (__ev64_u64__) { 0x54608819d6e84391 },
+  (__ev64_u64__) { 0x46577617962f3983 },
+  (__ev64_u64__) { 0xd5e48e1a1f950ebf },
+  (__ev64_u64__) { 0xd30a4c1bc0c68494 },
+  (__ev64_u64__) { 0xb75672415e161e8f },
+  (__ev64_u64__) { 0x8d08b9b6d17f349e },
+  (__ev64_u64__) { 0x3d8f99e1675618fb },
+  (__ev64_u64__) { 0x362c8aeb0b23ccda },
+  (__ev64_u64__) { 0x735cde2c49dd2ad8 },
+  (__ev64_u64__) { 0x2bbb26ee0e4cb870 },
+  (__ev64_u64__) { 0x4ffecb72064b2c64 },
+  (__ev64_u64__) { 0xc2da207386620594 },
+  (__ev64_u64__) { 0x281691ce95a80716 },
+  (__ev64_u64__) { 0x982ad6886e682c8e },
+  (__ev64_u64__) { 0xe3db256ba10c9b6b },
+  (__ev64_u64__) { 0xf2b0c81559acc89b },
+  (__ev64_u64__) { 0xd4cc367069e3fe9b },
+  (__ev64_u64__) { 0x130d008bd08ad56c },
+  (__ev64_u64__) { 0xbf55dc4a6c0f3ada },
+  (__ev64_u64__) { 0x5dd1771d3c1f036d },
+  (__ev64_u64__) { 0xe76dfa68185fb2fa },
+  (__ev64_u64__) { 0x504939bb6bfe9db8 },
+  (__ev64_u64__) { 0x0eb3ebfaa5b120d8 },
+  (__ev64_u64__) { 0x7c8a2be338214a74 },
+  (__ev64_u64__) { 0x2d756daf7b385001 },
+  (__ev64_u64__) { 0x3c78f432ae907855 },
+  (__ev64_u64__) { 0x3babc8041813a111 },
+  (__ev64_u64__) { 0x841d99971c964f9e },
+  (__ev64_u64__) { 0x8a9f6045109e1c2d },
+  (__ev64_u64__) { 0xb72d4efc2e4410b5 },
+};
+__ev64_u64__ evstddx_asm_dst[64];
+#endif // __SPE__
+
+int evstddx_asm(void)
+{
+  int failures = 0;
+#ifdef __SPE__
+  register void *src_base asm ("30");
+  register void *dst_base asm ("29");
+  register __ev64_u64__ vec asm ("28");
+  register int idx asm ("27");
+  register int i asm ("26");
+
+  asm volatile ("lis %[b], evstddx_asm_src@ha" : [b] "=r" (src_base));
+  asm volatile ("addic %[bd], %[bs], evstddx_asm_src@l" : [bd] "=r" (src_base) : [bs] "r" (src_base));
+  VERIFY (src_base == evstddx_asm_src);
+
+  asm volatile ("lis %[b], evstddx_asm_dst@ha" : [b] "=r" (dst_base));
+  asm volatile ("addic %[bd], %[bs], evstddx_asm_dst@l" : [bd] "=r" (dst_base) : [bs] "r" (dst_base));
+  VERIFY (dst_base == evstddx_asm_dst);
+
+  for (i = 0; i < 64; i++) {
+    idx = i * sizeof (__ev64_u64__);
+    asm volatile ("evlddx  %[v], %[b], %[i]" : [v] "=r" (vec) : [b] "r" (src_base), [i] "r" (idx));
+    asm volatile ("evstddx %[v], %[b], %[i]" : [v] "=r" (vec) : [b] "r" (dst_base), [i] "r" (idx));
+    VERIFY (evstddx_asm_src[i][0] == evstddx_asm_dst[i][0]);
+  }
+#endif // __SPE__
+  return failures;
+}
+TEST_SPE_DECL(evstddx_asm, "Unit test for evstddx using asm");
+
 /* NOTE: To avoid having to remaster the .exp files entirely, add
  *       new test functions /just above/ this comment.
  *       That way, you only need to worry about the test that you
@@ -863,6 +1057,8 @@ test_t spe_isa_load_store_test_table = {
   .table = {
     F(evldd_asm),
     F(evstdd_asm),
+    F(evlddx_asm),
+    F(evstddx_asm),
     NULL
   }
 };
@@ -934,3 +1130,5 @@ int main(void)
 
 // TODOS:
 // 0. Add extensive tests for printf ()-family functions with varied format.
+// 1. Make VERIFY() a variadic function, parametrized with the local paramters in addition to __LINE__.
+// 2. Make a data header file per test and include those throughout the code where you have those blobs of 0x's.
diff --git a/memcheck/tests/ppc32/test_spe.stderr.exp b/memcheck/tests/ppc32/test_spe.stderr.exp
index 0f498a1..00f2f76 100644
--- a/memcheck/tests/ppc32/test_spe.stderr.exp
+++ b/memcheck/tests/ppc32/test_spe.stderr.exp
@@ -5,7 +5,7 @@ Invalid write of size 4
    by 0x........: run (test_spe.h:42)
    by 0x........: run (test_spe.h:48)
    by 0x........: run (test_spe.h:48)
-   by 0x........: main (test_spe.c:930)
+   by 0x........: main (test_spe.c:1126)
  Address 0x........ is 0 bytes after a block of size 40 alloc'd
    at 0x........: malloc (vg_replace_malloc.c:...)
    by 0x........: vg_quick_start_guide_aux (test_spe.c:26)
@@ -13,7 +13,7 @@ Invalid write of size 4
    by 0x........: run (test_spe.h:42)
    by 0x........: run (test_spe.h:48)
    by 0x........: run (test_spe.h:48)
-   by 0x........: main (test_spe.c:930)
+   by 0x........: main (test_spe.c:1126)
 
 
 HEAP SUMMARY:
@@ -27,7 +27,7 @@ HEAP SUMMARY:
    by 0x........: run (test_spe.h:42)
    by 0x........: run (test_spe.h:48)
    by 0x........: run (test_spe.h:48)
-   by 0x........: main (test_spe.c:930)
+   by 0x........: main (test_spe.c:1126)
 
 LEAK SUMMARY:
    definitely lost: 40 bytes in 1 blocks
diff --git a/memcheck/tests/ppc32/test_spe.stdout.exp b/memcheck/tests/ppc32/test_spe.stdout.exp
index 8c7fd04..714eaa6 100644
--- a/memcheck/tests/ppc32/test_spe.stdout.exp
+++ b/memcheck/tests/ppc32/test_spe.stdout.exp
@@ -15,6 +15,8 @@ SPE Regression Tests: PASS
 ...SPE ISA Load Store Tests: PASS
 ....Unit test for evldd using asm: PASS
 ....Unit test for evstdd using asm: PASS
+....Unit test for evlddx using asm: PASS
+....Unit test for evstddx using asm: PASS
 ...SPE ISA Bitwise Operators Tests: PASS
 ....Unit test for evxor using asm: PASS
 ..SPE ISA Miscellaneous Tests: PASS
diff --git a/regtest-power7-64.log b/regtest-power7-64.log
index f889ca8..9306be8 100644
--- a/regtest-power7-64.log
+++ b/regtest-power7-64.log
@@ -461,7 +461,7 @@ gcc -Winline -Wall -Wshadow -g -m64 -gdwarf-4 -fdebug-types-section -Wno-long-lo
 make[5]: Leaving directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/memcheck/tests'
 make  check-local
 make[5]: Entering directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/memcheck/tests'
-make[5]: Warning: File `.deps/xml1.Po' has modification time 65 s in the future
+make[5]: Warning: File `.deps/xml1.Po' has modification time 66 s in the future
 for f in ; do \
   if [ ! -e $f.dSYM  -o  $f -nt $f.dSYM ] ; then \
       echo "dsymutil $f"; \
@@ -1158,7 +1158,7 @@ gcc -Winline -Wall -Wshadow -g -m32 -Winline -Wall -O -lm -g -mregnames -DHAS_DF
 make[5]: Leaving directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/none/tests/ppc32'
 make  check-local
 make[5]: Entering directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/none/tests/ppc32'
-make[5]: Warning: File `.deps/xlc_dbl_u32.Po' has modification time 67 s in the future
+make[5]: Warning: File `.deps/xlc_dbl_u32.Po' has modification time 68 s in the future
 for f in ; do \
   if [ ! -e $f.dSYM  -o  $f -nt $f.dSYM ] ; then \
       echo "dsymutil $f"; \
@@ -1418,7 +1418,7 @@ gcc -Winline -Wall -Wshadow -g -m64 -Wno-long-long  -Wno-pointer-sign -fno-stack
 make[4]: Leaving directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/helgrind/tests'
 make  check-local
 make[4]: Entering directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/helgrind/tests'
-make[4]: Warning: File `.deps/tc24_nonzero_sem.Po' has modification time 68 s in the future
+make[4]: Warning: File `.deps/tc24_nonzero_sem.Po' has modification time 69 s in the future
 for f in ; do \
   if [ ! -e $f.dSYM  -o  $f -nt $f.dSYM ] ; then \
       echo "dsymutil $f"; \
@@ -1863,7 +1863,7 @@ gcc -Winline -Wall -Wshadow -g -O -m64 -Wno-shadow -Wno-inline -Wno-long-long  -
 make[3]: Leaving directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/perf'
 make  check-local
 make[3]: Entering directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/perf'
-make[3]: Warning: File `.deps/tinycc-tinycc.Po' has modification time 69 s in the future
+make[3]: Warning: File `.deps/tinycc-tinycc.Po' has modification time 70 s in the future
 for f in ; do \
   if [ ! -e $f.dSYM  -o  $f -nt $f.dSYM ] ; then \
       echo "dsymutil $f"; \
@@ -1980,7 +1980,7 @@ badfree-2trace:  valgrind   --num-callers=2 -q ./badfree
 badfree:         valgrind   -q ./badfree 
 badfree3:        valgrind   -q --fullpath-after=/proj/ppc/DT/labhome/anmol/valgrind-3.8.1/ ./badfree 
 badjump:         valgrind   ./badjump 
-sh: line 1: 10642 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck ./badjump > badjump.stdout.out 2> badjump.stderr.out
+sh: line 1: 18704 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck ./badjump > badjump.stdout.out 2> badjump.stderr.out
 badjump2:        valgrind   -q ./badjump2 
 badloop:         valgrind   -q ./badloop 
 badpoll:         valgrind   -q ./badpoll 
@@ -1997,7 +1997,7 @@ clo_redzone_default: valgrind   --leak-check=no -q ./clo_redzone
 custom-overlap:  valgrind   --leak-check=summary -q ./custom-overlap 
 custom_alloc:    valgrind   -q ./custom_alloc 
 deep-backtrace:  valgrind   -q --num-callers=500 ./deep-backtrace 
-sh: line 1: 11202 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck -q --num-callers=500 ./deep-backtrace > deep-backtrace.stdout.out 2> deep-backtrace.stderr.out
+sh: line 1: 19268 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck -q --num-callers=500 ./deep-backtrace > deep-backtrace.stdout.out 2> deep-backtrace.stderr.out
 deep_templates:  valgrind   -q ./deep_templates 
 describe-block:  valgrind   ./describe-block 
 doublefree:      valgrind   -q ./doublefree 
@@ -2110,7 +2110,7 @@ supp-dir:        valgrind   --suppressions=x86/ ./../../tests/true
 supp1:           valgrind   --suppressions=supp.supp -q ./supp1 
 supp2:           valgrind   --suppressions=supp.supp -q ./supp2 
 supp_unknown:    valgrind   -q --suppressions=supp_unknown.supp ./badjump 
-sh: line 1: 15901 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck -q --suppressions=supp_unknown.supp ./badjump > supp_unknown.stdout.out 2> supp_unknown.stderr.out
+sh: line 1: 23965 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck -q --suppressions=supp_unknown.supp ./badjump > supp_unknown.stdout.out 2> supp_unknown.stderr.out
 *** supp_unknown failed (stderr) ***
 suppfree:        valgrind   --suppressions=suppfree.supp -q ./suppfree 
 test-plo-no:     valgrind   -q ./test-plo 
@@ -2246,7 +2246,7 @@ gxx304:          valgrind   ./gxx304
 ifunc:           (skipping, prereq failed: test -e ifunc)
 -- Running  tests in none/tests/linux ----------------------------------
 blockfault:      valgrind   ./blockfault 
-sh: line 1: 20385 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=none ./blockfault > blockfault.stdout.out 2> blockfault.stderr.out
+sh: line 1: 28448 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=none ./blockfault > blockfault.stdout.out 2> blockfault.stderr.out
 mremap:          valgrind   ./mremap 
 mremap2:         valgrind   ./mremap2 
 mremap3:         valgrind   ./mremap3 
@@ -2412,7 +2412,7 @@ tc20_verifywrap: valgrind   --read-var-info=yes ./tc20_verifywrap
 *** tc20_verifywrap failed (stderr) ***
 tc21_pthonce:    valgrind   --read-var-info=yes ./tc21_pthonce 
 tc22_exit_w_lock: valgrind   ./tc22_exit_w_lock 
-sh: line 1:  5524 Aborted                 (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=helgrind ./tc22_exit_w_lock > tc22_exit_w_lock.stdout.out 2> tc22_exit_w_lock.stderr.out
+sh: line 1: 13600 Aborted                 (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=helgrind ./tc22_exit_w_lock > tc22_exit_w_lock.stdout.out 2> tc22_exit_w_lock.stderr.out
 tc23_bogus_condwait: valgrind   ./tc23_bogus_condwait 
 tc24_nonzero_sem: valgrind   --hg-sanity-flags=111111 ./tc24_nonzero_sem 
 -- Finished tests in helgrind/tests ------------------------------------
@@ -2531,7 +2531,7 @@ tc18_semabuse:   valgrind   ./../../helgrind/tests/tc18_semabuse
 tc19_shadowmem:  valgrind   --error-limit=no --read-var-info=yes --show-confl-seg=no --num-callers=3 ./../../helgrind/tests/tc19_shadowmem 
 tc21_pthonce:    valgrind   --num-callers=3 ./../../helgrind/tests/tc21_pthonce 
 tc22_exit_w_lock: valgrind   --num-callers=3 ./../../helgrind/tests/tc22_exit_w_lock 
-sh: line 1: 10910 Aborted                 (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=drd --num-callers=3 ./../../helgrind/tests/tc22_exit_w_lock > tc22_exit_w_lock.stdout.out 2> tc22_exit_w_lock.stderr.out
+sh: line 1: 18941 Aborted                 (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=drd --num-callers=3 ./../../helgrind/tests/tc22_exit_w_lock > tc22_exit_w_lock.stdout.out 2> tc22_exit_w_lock.stderr.out
 tc23_bogus_condwait: valgrind   --num-callers=3 ./../../helgrind/tests/tc23_bogus_condwait 
 tc24_nonzero_sem: valgrind   --read-var-info=yes ./../../helgrind/tests/tc24_nonzero_sem 
 thread_name:     valgrind   --read-var-info=yes --check-stack-var=yes --num-callers=3 ./thread_name 
-- 
1.7.3.4

