From 9cb0e82558725d39c3a9baa6390c12e3099d50ab Mon Sep 17 00:00:00 2001
From: Anmol P. Paralkar <anmol@freescale.com>
Date: Thu, 21 Feb 2013 12:58:05 -0800
Subject: [PATCH 30/65] Implement SPE Instructions: { evsplatfi, evsplati }.

---
 VEX/priv/guest_ppc_toIR.c                |   66 ++++++++++
 memcheck/tests/ppc32/test_spe.c          |  205 ++++++++++++++++++++++++++++++
 memcheck/tests/ppc32/test_spe.stderr.exp |    6 +-
 memcheck/tests/ppc32/test_spe.stdout.exp |    4 +
 regtest-power7-64.log                    |   18 ++--
 5 files changed, 287 insertions(+), 12 deletions(-)

diff --git a/VEX/priv/guest_ppc_toIR.c b/VEX/priv/guest_ppc_toIR.c
index 8f1fdbd..641b8bb 100644
--- a/VEX/priv/guest_ppc_toIR.c
+++ b/VEX/priv/guest_ppc_toIR.c
@@ -12574,6 +12574,49 @@ static IRExpr* spe_shift_amount ( IRExpr* src,
                 msk );
 }
 
+static IRExpr* spe_5Sto32 ( IRExpr* src )
+{
+  /* src is an IRExpr corresponding to a Ico_U8, but contains a 5-bit *signed*
+   * literal.
+   * If bit-0/5 is set, spe_5Sto32() return's a sign-extended 32-bit number.
+   */
+  IRTemp w0 = newTemp( Ity_I32 );
+  IRTemp w1 = newTemp( Ity_I32 );
+  IRTemp c0 = newTemp( Ity_I1 );
+  IRTemp b0 = newTemp( Ity_I8 );
+
+  // Convert from 8-bit to 32-bit first; doing an 8-bit right-shift,
+  // we hit the vassert(0) in:
+  // VEX/priv/host_ppc_isel.c/
+  // static HReg iselWordExpr_R_wrk ( ISelEnv* env, IRExpr* e )
+  //  if (shftOp == Pshft_SHR || shftOp == Pshft_SAR) {
+  //    if (ty == Ity_I8 || ty == Ity_I16) {
+  //      ...
+  //      vassert(0); /* AWAITING TEST CASE */
+  //    }
+  //  }
+  assign( w0, unop( Iop_8Uto32,
+                    src ) );
+
+  assign( w1, binop( Iop_Shr32,
+                     mkexpr( w0 ),
+                     mkU8( 0x4 ) ) );
+
+  assign( c0, binop( Iop_CmpEQ32,
+                     mkexpr( w1 ),
+                     mkU32( 0x1 ) ) );
+
+  assign( b0, unop( Iop_1Uto8,
+                    mkexpr( c0 ) ) );
+
+  return IRExpr_Mux0X ( mkexpr( b0 ),
+                        mkexpr( w0 ), /* else   (b1 holds False) */
+                        unop( Iop_8Sto32, /* if (b1 holds True)  */
+                              binop( Iop_Or8,
+                                     mkU8( 0xe0 ),
+                                     src ) ) );
+}
+
 static Bool dis_spe_shift_rotate ( UInt theInstr )
 {
    /* EVX-Form */
@@ -12583,6 +12626,7 @@ static Bool dis_spe_shift_rotate ( UInt theInstr )
    UChar rA_addr = evxRA( theInstr );
    UChar rB_addr = evxRB( theInstr );
    UChar uimm    = evxRB( theInstr );
+   Char  simm    = evxRA( theInstr );
 
    IRTemp rA = newTemp( Ity_I64 );
    IRTemp rB = newTemp( Ity_I64 );
@@ -12629,10 +12673,18 @@ static Bool dis_spe_shift_rotate ( UInt theInstr )
       // evrlw (Vector Rotate Left Word, SPEPEM p5-216)
       DIP( "evrlw r%d, r%d, r%d\n", rD_addr, rA_addr, rB_addr );
       break;
+   case 0x229:
+      // evsplati (Vector Splat Immediate, SPEPEM p5-223)
+      DIP( "evsplati r%d, %d\n", rD_addr, simm );
+      break;
    case 0x22a:
       // evrlwi (Vector Rotate Left Word Immediate, SPEPEM p5-217)
       DIP( "evrlwi r%d, r%d, %d\n", rD_addr, rA_addr, uimm );
       break;
+   case 0x22b:
+      // evsplatfi (Vector Splat Fractional Immediate, SPEPEM p5-222)
+      DIP( "evsplatfi r%d, %d\n", rD_addr, simm );
+      break;
    default:
       return False;
    }
@@ -12710,12 +12762,24 @@ static Bool dis_spe_shift_rotate ( UInt theInstr )
                          spe_shift_amount ( mkexpr ( rBU ),
                                             mkU8   ( 0x1f ) ) ) );
       break;
+   case 0x229: // evsplati
+        assign ( rDL, spe_5Sto32( mkU8 ( simm ) ) );
+        assign ( rDU, spe_5Sto32( mkU8 ( simm ) ) );
+      break;
    case 0x22a: // evrlwi
       assign( rDL, ROTL( mkexpr ( rAL ),
                          mkU8 ( uimm ) ) );
       assign( rDU, ROTL( mkexpr ( rAU ),
                          mkU8 ( uimm ) ) );
       break;
+   case 0x22b: // evsplatfi
+      assign( rDL, binop( Iop_Shl32,
+                          mkU32 ( simm ),
+                          mkU8 ( 0x1b ) ) );
+      assign( rDU, binop( Iop_Shl32,
+                          mkU32 ( simm ),
+                          mkU8 ( 0x1b ) ) );
+      break;
    default:
       return False;
    }
@@ -18781,7 +18845,9 @@ DisResult disInstr_PPC_WRK (
       case 0x224: // evslw
       case 0x226: // evslwi
       case 0x228: // evrlw
+      case 0x229: // evsplati
       case 0x22a: // evrlwi
+      case 0x22b: // evsplatfi
          if (!allow_SPE) goto decode_noSPE;
          if (dis_spe_shift_rotate( theInstr )) goto decode_success;
          goto decode_failure;
diff --git a/memcheck/tests/ppc32/test_spe.c b/memcheck/tests/ppc32/test_spe.c
index 5dcd978..af513bd 100644
--- a/memcheck/tests/ppc32/test_spe.c
+++ b/memcheck/tests/ppc32/test_spe.c
@@ -6026,6 +6026,207 @@ int __ev_cntlzw_intrinsic(void)
 }
 TEST_SPE_DECL(__ev_cntlzw_intrinsic, "__ev_cntlzw");
 
+int evsplatfi_asm(void)
+{
+  int failures = 0;
+#ifdef __SPE__
+  register __ev64_s32__ regD asm ("30");
+
+#define EVSPLATFI(simm)                                     \
+  asm volatile ("evsplatfi %[d]," #simm : [d] "=r" (regD)); \
+  VERIFY(regD[0] == ((simm) << 27));                        \
+  VERIFY(regD[1] == ((simm) << 27));
+
+  EVSPLATFI(-16);
+  EVSPLATFI(-15);
+  EVSPLATFI(-14);
+  EVSPLATFI(-13);
+  EVSPLATFI(-12);
+  EVSPLATFI(-11);
+  EVSPLATFI(-10);
+  EVSPLATFI(-9);
+  EVSPLATFI(-8);
+  EVSPLATFI(-7);
+  EVSPLATFI(-6);
+  EVSPLATFI(-5);
+  EVSPLATFI(-4);
+  EVSPLATFI(-3);
+  EVSPLATFI(-2);
+  EVSPLATFI(-1);
+  EVSPLATFI(0);
+  EVSPLATFI(1);
+  EVSPLATFI(2);
+  EVSPLATFI(3);
+  EVSPLATFI(4);
+  EVSPLATFI(5);
+  EVSPLATFI(6);
+  EVSPLATFI(7);
+  EVSPLATFI(8);
+  EVSPLATFI(9);
+  EVSPLATFI(10);
+  EVSPLATFI(11);
+  EVSPLATFI(12);
+  EVSPLATFI(13);
+  EVSPLATFI(14);
+  EVSPLATFI(15);
+
+#endif // __SPE__
+  return failures;
+}
+TEST_SPE_DECL(evsplatfi_asm, "evsplatfi");
+
+int __ev_splatfi_intrinsic(void)
+{
+  int failures = 0;
+#ifdef __SPE__
+  __ev64_opaque__ vd;
+
+#define __EV_SPLATFI(simm)                          \
+  vd = __ev_splatfi((simm));                        \
+  VERIFY(__ev_get_upper_s32(vd) == ((simm) << 27)); \
+  VERIFY(__ev_get_lower_s32(vd) == ((simm) << 27));
+
+  __EV_SPLATFI(-16);
+  __EV_SPLATFI(-15);
+  __EV_SPLATFI(-14);
+  __EV_SPLATFI(-13);
+  __EV_SPLATFI(-12);
+  __EV_SPLATFI(-11);
+  __EV_SPLATFI(-10);
+  __EV_SPLATFI(-9);
+  __EV_SPLATFI(-8);
+  __EV_SPLATFI(-7);
+  __EV_SPLATFI(-6);
+  __EV_SPLATFI(-5);
+  __EV_SPLATFI(-4);
+  __EV_SPLATFI(-3);
+  __EV_SPLATFI(-2);
+  __EV_SPLATFI(-1);
+  __EV_SPLATFI(0);
+  __EV_SPLATFI(1);
+  __EV_SPLATFI(2);
+  __EV_SPLATFI(3);
+  __EV_SPLATFI(4);
+  __EV_SPLATFI(5);
+  __EV_SPLATFI(6);
+  __EV_SPLATFI(7);
+  __EV_SPLATFI(8);
+  __EV_SPLATFI(9);
+  __EV_SPLATFI(10);
+  __EV_SPLATFI(11);
+  __EV_SPLATFI(12);
+  __EV_SPLATFI(13);
+  __EV_SPLATFI(14);
+  __EV_SPLATFI(15);
+
+#endif // __SPE__
+  return failures;
+}
+TEST_SPE_DECL(__ev_splatfi_intrinsic, "__ev_splatfi");
+
+int evsplati_asm(void)
+{
+  int failures = 0;
+#ifdef __SPE__
+  register __ev64_u32__ regD asm ("30");
+
+
+#define EVSPLATI(simm)                                     \
+  asm volatile ("evsplati %[d]," #simm : [d] "=r" (regD)); \
+  VERIFY(regD[0] == ((((simm) >> 4) == 0x0) ?              \
+                     ((simm) & 0x1f) :                     \
+                     (0xffffffe0 + ((simm) & 0x1f))));     \
+  VERIFY(regD[1] == regD[0]);
+
+  EVSPLATI(-16);
+  EVSPLATI(-15);
+  EVSPLATI(-14);
+  EVSPLATI(-13);
+  EVSPLATI(-12);
+  EVSPLATI(-11);
+  EVSPLATI(-10);
+  EVSPLATI(-9);
+  EVSPLATI(-8);
+  EVSPLATI(-7);
+  EVSPLATI(-6);
+  EVSPLATI(-5);
+  EVSPLATI(-4);
+  EVSPLATI(-3);
+  EVSPLATI(-2);
+  EVSPLATI(-1);
+  EVSPLATI(0);
+  EVSPLATI(1);
+  EVSPLATI(2);
+  EVSPLATI(3);
+  EVSPLATI(4);
+  EVSPLATI(5);
+  EVSPLATI(6);
+  EVSPLATI(7);
+  EVSPLATI(8);
+  EVSPLATI(9);
+  EVSPLATI(10);
+  EVSPLATI(11);
+  EVSPLATI(12);
+  EVSPLATI(13);
+  EVSPLATI(14);
+  EVSPLATI(15);
+
+#endif // __SPE__
+  return failures;
+}
+TEST_SPE_DECL(evsplati_asm, "evsplati");
+
+int __ev_splati_intrinsic(void)
+{
+  int failures = 0;
+#ifdef __SPE__
+  __ev64_opaque__ vd;
+
+#define __EV_SPLATI(simm)                                              \
+  vd = __ev_splati ((simm));                                           \
+  VERIFY(__ev_get_upper_s32 (vd) == ((((simm) >> 4) == 0x0) ?          \
+                                     ((simm) & 0x1f) :                 \
+                                     (0xffffffe0 + ((simm) & 0x1f)))); \
+  VERIFY(__ev_get_lower_s32 (vd) == __ev_get_upper_s32 (vd));
+
+  __EV_SPLATI(-16);
+  __EV_SPLATI(-15);
+  __EV_SPLATI(-14);
+  __EV_SPLATI(-13);
+  __EV_SPLATI(-12);
+  __EV_SPLATI(-11);
+  __EV_SPLATI(-10);
+  __EV_SPLATI(-9);
+  __EV_SPLATI(-8);
+  __EV_SPLATI(-7);
+  __EV_SPLATI(-6);
+  __EV_SPLATI(-5);
+  __EV_SPLATI(-4);
+  __EV_SPLATI(-3);
+  __EV_SPLATI(-2);
+  __EV_SPLATI(-1);
+  __EV_SPLATI(0);
+  __EV_SPLATI(1);
+  __EV_SPLATI(2);
+  __EV_SPLATI(3);
+  __EV_SPLATI(4);
+  __EV_SPLATI(5);
+  __EV_SPLATI(6);
+  __EV_SPLATI(7);
+  __EV_SPLATI(8);
+  __EV_SPLATI(9);
+  __EV_SPLATI(10);
+  __EV_SPLATI(11);
+  __EV_SPLATI(12);
+  __EV_SPLATI(13);
+  __EV_SPLATI(14);
+  __EV_SPLATI(15);
+
+#endif // __SPE__
+  return failures;
+}
+TEST_SPE_DECL(__ev_splati_intrinsic, "__ev_splati");
+
 /* NOTE: To avoid having to remaster the .exp files entirely, add
  *       new test functions /just above/ this comment.
  *       That way, you only need to worry about the test that you
@@ -6158,6 +6359,8 @@ test_t spe_isa_shift_rotate_insns_test_table = {
     F(evsrwiu_asm),
     F(evsrws_asm),
     F(evsrwis_asm),
+    F(evsplatfi_asm),
+    F(evsplati_asm),
     NULL
   }
 };
@@ -6261,6 +6464,8 @@ test_t chapter3_spe2pim_intrinsics_tests_table = {
     F(__ev_extsh_intrinsic),
     F(__ev_cntlsw_intrinsic),
     F(__ev_cntlzw_intrinsic),
+    F(__ev_splatfi_intrinsic),
+    F(__ev_splati_intrinsic),
     NULL
   }
 };
diff --git a/memcheck/tests/ppc32/test_spe.stderr.exp b/memcheck/tests/ppc32/test_spe.stderr.exp
index 7ebf146..c01d454 100644
--- a/memcheck/tests/ppc32/test_spe.stderr.exp
+++ b/memcheck/tests/ppc32/test_spe.stderr.exp
@@ -5,7 +5,7 @@ Invalid write of size 4
    by 0x........: run (test_spe.h:42)
    by 0x........: run (test_spe.h:48)
    by 0x........: run (test_spe.h:48)
-   by 0x........: main (test_spe.c:6330)
+   by 0x........: main (test_spe.c:6535)
  Address 0x........ is 0 bytes after a block of size 40 alloc'd
    at 0x........: malloc (vg_replace_malloc.c:...)
    by 0x........: vg_quick_start_guide_aux (test_spe.c:26)
@@ -13,7 +13,7 @@ Invalid write of size 4
    by 0x........: run (test_spe.h:42)
    by 0x........: run (test_spe.h:48)
    by 0x........: run (test_spe.h:48)
-   by 0x........: main (test_spe.c:6330)
+   by 0x........: main (test_spe.c:6535)
 
 
 HEAP SUMMARY:
@@ -27,7 +27,7 @@ HEAP SUMMARY:
    by 0x........: run (test_spe.h:42)
    by 0x........: run (test_spe.h:48)
    by 0x........: run (test_spe.h:48)
-   by 0x........: main (test_spe.c:6330)
+   by 0x........: main (test_spe.c:6535)
 
 LEAK SUMMARY:
    definitely lost: 40 bytes in 1 blocks
diff --git a/memcheck/tests/ppc32/test_spe.stdout.exp b/memcheck/tests/ppc32/test_spe.stdout.exp
index 221edfe..adc6e0a 100644
--- a/memcheck/tests/ppc32/test_spe.stdout.exp
+++ b/memcheck/tests/ppc32/test_spe.stdout.exp
@@ -79,6 +79,8 @@ SPE Regression Tests: PASS
 ....evsrwiu: PASS
 ....evsrws: PASS
 ....evsrwis: PASS
+....evsplatfi: PASS
+....evsplati: PASS
 ..SPE2PIM Tests: PASS
 ...Chapter 2: High-Level Language Interface: PASS
 ...Chapter 5: Programming Interface Examples: PASS
@@ -144,6 +146,8 @@ SPE Regression Tests: PASS
 ....__ev_extsh: PASS
 ....__ev_cntlsw: PASS
 ....__ev_cntlzw: PASS
+....__ev_splatfi: PASS
+....__ev_splati: PASS
 ..SPE ISA Miscellaneous Tests: PASS
 ...Memory transfer using evldd-evstdd: PASS
 ...Value pool demo: PASS
diff --git a/regtest-power7-64.log b/regtest-power7-64.log
index ce66932..a660b62 100644
--- a/regtest-power7-64.log
+++ b/regtest-power7-64.log
@@ -461,7 +461,7 @@ gcc -Winline -Wall -Wshadow -g -m64 -gdwarf-4 -fdebug-types-section -Wno-long-lo
 make[5]: Leaving directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/memcheck/tests'
 make  check-local
 make[5]: Entering directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/memcheck/tests'
-make[5]: Warning: File `.deps/xml1.Po' has modification time 69 s in the future
+make[5]: Warning: File `.deps/xml1.Po' has modification time 70 s in the future
 for f in ; do \
   if [ ! -e $f.dSYM  -o  $f -nt $f.dSYM ] ; then \
       echo "dsymutil $f"; \
@@ -1158,7 +1158,7 @@ gcc -Winline -Wall -Wshadow -g -m32 -Winline -Wall -O -lm -g -mregnames -DHAS_DF
 make[5]: Leaving directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/none/tests/ppc32'
 make  check-local
 make[5]: Entering directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/none/tests/ppc32'
-make[5]: Warning: File `.deps/xlc_dbl_u32.Po' has modification time 71 s in the future
+make[5]: Warning: File `.deps/xlc_dbl_u32.Po' has modification time 72 s in the future
 for f in ; do \
   if [ ! -e $f.dSYM  -o  $f -nt $f.dSYM ] ; then \
       echo "dsymutil $f"; \
@@ -1226,7 +1226,7 @@ gcc -Winline -Wall -Wshadow -g -m64 -Winline -Wall -O -lm -g -mregnames -DHAS_DF
 make[5]: Leaving directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/none/tests/ppc64'
 make  check-local
 make[5]: Entering directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/none/tests/ppc64'
-make[5]: Warning: File `.deps/twi_tdi.Po' has modification time 71 s in the future
+make[5]: Warning: File `.deps/twi_tdi.Po' has modification time 72 s in the future
 for f in ; do \
   if [ ! -e $f.dSYM  -o  $f -nt $f.dSYM ] ; then \
       echo "dsymutil $f"; \
@@ -1980,7 +1980,7 @@ badfree-2trace:  valgrind   --num-callers=2 -q ./badfree
 badfree:         valgrind   -q ./badfree 
 badfree3:        valgrind   -q --fullpath-after=/proj/ppc/DT/labhome/anmol/valgrind-3.8.1/ ./badfree 
 badjump:         valgrind   ./badjump 
-sh: line 1:  7258 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck ./badjump > badjump.stdout.out 2> badjump.stderr.out
+sh: line 1:  6832 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck ./badjump > badjump.stdout.out 2> badjump.stderr.out
 badjump2:        valgrind   -q ./badjump2 
 badloop:         valgrind   -q ./badloop 
 badpoll:         valgrind   -q ./badpoll 
@@ -1997,7 +1997,7 @@ clo_redzone_default: valgrind   --leak-check=no -q ./clo_redzone
 custom-overlap:  valgrind   --leak-check=summary -q ./custom-overlap 
 custom_alloc:    valgrind   -q ./custom_alloc 
 deep-backtrace:  valgrind   -q --num-callers=500 ./deep-backtrace 
-sh: line 1:  7824 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck -q --num-callers=500 ./deep-backtrace > deep-backtrace.stdout.out 2> deep-backtrace.stderr.out
+sh: line 1:  7392 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck -q --num-callers=500 ./deep-backtrace > deep-backtrace.stdout.out 2> deep-backtrace.stderr.out
 deep_templates:  valgrind   -q ./deep_templates 
 describe-block:  valgrind   ./describe-block 
 doublefree:      valgrind   -q ./doublefree 
@@ -2110,7 +2110,7 @@ supp-dir:        valgrind   --suppressions=x86/ ./../../tests/true
 supp1:           valgrind   --suppressions=supp.supp -q ./supp1 
 supp2:           valgrind   --suppressions=supp.supp -q ./supp2 
 supp_unknown:    valgrind   -q --suppressions=supp_unknown.supp ./badjump 
-sh: line 1: 12557 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck -q --suppressions=supp_unknown.supp ./badjump > supp_unknown.stdout.out 2> supp_unknown.stderr.out
+sh: line 1: 12133 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck -q --suppressions=supp_unknown.supp ./badjump > supp_unknown.stdout.out 2> supp_unknown.stderr.out
 *** supp_unknown failed (stderr) ***
 suppfree:        valgrind   --suppressions=suppfree.supp -q ./suppfree 
 test-plo-no:     valgrind   -q ./test-plo 
@@ -2246,7 +2246,7 @@ gxx304:          valgrind   ./gxx304
 ifunc:           (skipping, prereq failed: test -e ifunc)
 -- Running  tests in none/tests/linux ----------------------------------
 blockfault:      valgrind   ./blockfault 
-sh: line 1: 17035 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=none ./blockfault > blockfault.stdout.out 2> blockfault.stderr.out
+sh: line 1: 16608 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=none ./blockfault > blockfault.stdout.out 2> blockfault.stderr.out
 mremap:          valgrind   ./mremap 
 mremap2:         valgrind   ./mremap2 
 mremap3:         valgrind   ./mremap3 
@@ -2412,7 +2412,7 @@ tc20_verifywrap: valgrind   --read-var-info=yes ./tc20_verifywrap
 *** tc20_verifywrap failed (stderr) ***
 tc21_pthonce:    valgrind   --read-var-info=yes ./tc21_pthonce 
 tc22_exit_w_lock: valgrind   ./tc22_exit_w_lock 
-sh: line 1:  2132 Aborted                 (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=helgrind ./tc22_exit_w_lock > tc22_exit_w_lock.stdout.out 2> tc22_exit_w_lock.stderr.out
+sh: line 1:  1707 Aborted                 (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=helgrind ./tc22_exit_w_lock > tc22_exit_w_lock.stdout.out 2> tc22_exit_w_lock.stderr.out
 tc23_bogus_condwait: valgrind   ./tc23_bogus_condwait 
 tc24_nonzero_sem: valgrind   --hg-sanity-flags=111111 ./tc24_nonzero_sem 
 -- Finished tests in helgrind/tests ------------------------------------
@@ -2531,7 +2531,7 @@ tc18_semabuse:   valgrind   ./../../helgrind/tests/tc18_semabuse
 tc19_shadowmem:  valgrind   --error-limit=no --read-var-info=yes --show-confl-seg=no --num-callers=3 ./../../helgrind/tests/tc19_shadowmem 
 tc21_pthonce:    valgrind   --num-callers=3 ./../../helgrind/tests/tc21_pthonce 
 tc22_exit_w_lock: valgrind   --num-callers=3 ./../../helgrind/tests/tc22_exit_w_lock 
-sh: line 1:  7482 Aborted                 (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=drd --num-callers=3 ./../../helgrind/tests/tc22_exit_w_lock > tc22_exit_w_lock.stdout.out 2> tc22_exit_w_lock.stderr.out
+sh: line 1:  7056 Aborted                 (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=drd --num-callers=3 ./../../helgrind/tests/tc22_exit_w_lock > tc22_exit_w_lock.stdout.out 2> tc22_exit_w_lock.stderr.out
 tc23_bogus_condwait: valgrind   --num-callers=3 ./../../helgrind/tests/tc23_bogus_condwait 
 tc24_nonzero_sem: valgrind   --read-var-info=yes ./../../helgrind/tests/tc24_nonzero_sem 
 thread_name:     valgrind   --read-var-info=yes --check-stack-var=yes --num-callers=3 ./thread_name 
-- 
1.7.3.4

