From d01db3764e9665390af5881f8425faf46c936b55 Mon Sep 17 00:00:00 2001
From: Anmol P. Paralkar <anmol@freescale.com>
Date: Wed, 6 Feb 2013 11:06:43 -0800
Subject: [PATCH 22/65] Implement SPE Instructions: { evand, evandc, eveqv, evnand, evnor, evnot, evorc }.

---
 VEX/priv/guest_ppc_toIR.c                |   93 +++++++++++++++++-
 memcheck/tests/ppc32/test_spe.c          |  159 ++++++++++++++++++++++++++++++
 memcheck/tests/ppc32/test_spe.h          |    8 ++
 memcheck/tests/ppc32/test_spe.stderr.exp |    6 +-
 memcheck/tests/ppc32/test_spe.stdout.exp |    7 ++
 regtest-power7-64.log                    |   16 ++--
 6 files changed, 276 insertions(+), 13 deletions(-)

diff --git a/VEX/priv/guest_ppc_toIR.c b/VEX/priv/guest_ppc_toIR.c
index 8945180..4c9bcad 100644
--- a/VEX/priv/guest_ppc_toIR.c
+++ b/VEX/priv/guest_ppc_toIR.c
@@ -12258,6 +12258,9 @@ static Bool dis_spe_bitwise ( UInt theInstr )
    IRTemp rDU  = newTemp( Ity_I32 );
    IRTemp rDL  = newTemp( Ity_I32 );
 
+   IRTemp rT0L  = newTemp( Ity_I32 );
+   IRTemp rT0U  = newTemp( Ity_I32 );
+
    IRTemp rD = newTemp( Ity_I64 );
 
    if (opc1 != 0x4) {
@@ -12266,8 +12269,22 @@ static Bool dis_spe_bitwise ( UInt theInstr )
    }
    switch (opc2) {
 
+   case 0x211:
+   case 0x212:
    case 0x216:
    case 0x217:
+   case 0x218:
+   case 0x219:
+   case 0x21b:
+   case 0x21e:
+      if (opc2 == 0x211) {
+        // evand (Vector AND, SPEPEM p5-75)
+        DIP( "evand r%d, r%d, r%d\n", rD_addr, rA_addr, rB_addr );
+      }
+      if (opc2 == 0x212) {
+        // evandc (Vector AND with Complement, SPEPEM p5-76)
+        DIP( "evandc r%d, r%d, r%d\n", rD_addr, rA_addr, rB_addr );
+      }
       if (opc2 == 0x216) {
         // evxor (Vector XOR, SPEPEM p5-248)
         DIP( "evxor r%d, r%d, r%d\n", rD_addr, rA_addr, rB_addr );
@@ -12276,12 +12293,43 @@ static Bool dis_spe_bitwise ( UInt theInstr )
         // evor (Vector OR, SPEPEM p5-214)
         DIP( "evor r%d, r%d, r%d\n", rD_addr, rA_addr, rB_addr );
       }
+      if (opc2 == 0x218) {
+        // evnor (Vector NOR, SPEPEM p5-213)
+        DIP( "evnor r%d, r%d, r%d\n", rD_addr, rA_addr, rB_addr );
+      }
+      if (opc2 == 0x219) {
+        // eveqv (Vector Equivalent, SPEPEM p5-86)
+        DIP( "eveq r%d, r%d, r%d\n", rD_addr, rA_addr, rB_addr );
+      }
+      if (opc2 == 0x21b) {
+        // evorc (Vector OR with Complement, SPEPEM p5-215)
+        DIP( "evorc r%d, r%d, r%d\n", rD_addr, rA_addr, rB_addr );
+      }
+      if (opc2 == 0x21e) {
+        // evnand (Vector NAND, SPEPEM p5-211)
+        DIP( "evnand r%d, r%d, r%d\n", rD_addr, rA_addr, rB_addr );
+      }
+
       assign ( rA, getSPEReg( rA_addr ) );
       assign ( rB, getSPEReg( rB_addr ) );
-      assign ( rAL, unop( Iop_64to32, mkexpr ( rA ) ) );
+
+      assign ( rAL, unop( Iop_64to32,   mkexpr ( rA ) ) );
       assign ( rAU, unop( Iop_64HIto32, mkexpr ( rA ) ) );
-      assign ( rBL, unop( Iop_64to32, mkexpr ( rB ) ) );
+      assign ( rBL, unop( Iop_64to32,   mkexpr ( rB ) ) );
       assign ( rBU, unop( Iop_64HIto32, mkexpr ( rB ) ) );
+
+      if (opc2 == 0x211) { // evand
+        assign ( rDL, binop( Iop_And32, mkexpr ( rAL ), mkexpr ( rBL ) ) );
+        assign ( rDU, binop( Iop_And32, mkexpr ( rAU ), mkexpr ( rBU ) ) );
+      }
+      if (opc2 == 0x212) { // evandc
+
+        assign ( rT0L, unop(  Iop_Not32, mkexpr ( rBL ) ) );
+        assign ( rT0U, unop(  Iop_Not32, mkexpr ( rBU ) ) );
+
+        assign ( rDL,  binop( Iop_And32, mkexpr ( rAL ), mkexpr ( rT0L ) ) );
+        assign ( rDU,  binop( Iop_And32, mkexpr ( rAU ), mkexpr ( rT0U ) ) );
+      }
       if (opc2 == 0x216) { // evxor
         assign ( rDL, binop( Iop_Xor32, mkexpr ( rAL ), mkexpr ( rBL ) ) );
         assign ( rDU, binop( Iop_Xor32, mkexpr ( rAU ), mkexpr ( rBU ) ) );
@@ -12290,9 +12338,44 @@ static Bool dis_spe_bitwise ( UInt theInstr )
         assign ( rDL, binop( Iop_Or32, mkexpr ( rAL ), mkexpr ( rBL ) ) );
         assign ( rDU, binop( Iop_Or32, mkexpr ( rAU ), mkexpr ( rBU ) ) );
       }
+      if (opc2 == 0x218) { // evnor
+
+        assign ( rT0L, binop( Iop_Or32, mkexpr ( rAL ), mkexpr ( rBL ) ) );
+        assign ( rT0U, binop( Iop_Or32, mkexpr ( rAU ), mkexpr ( rBU ) ) );
+
+        assign ( rDL, unop( Iop_Not32, mkexpr ( rT0L ) ) );
+        assign ( rDU, unop( Iop_Not32, mkexpr ( rT0U ) ) );
+      }
+      if (opc2 == 0x219) { // eveqv
+
+        assign ( rT0L, binop( Iop_Xor32, mkexpr ( rAL ), mkexpr ( rBL ) ) );
+        assign ( rT0U, binop( Iop_Xor32, mkexpr ( rAU ), mkexpr ( rBU ) ) );
+
+        assign ( rDL, unop( Iop_Not32, mkexpr ( rT0L ) ) );
+        assign ( rDU, unop( Iop_Not32, mkexpr ( rT0U ) ) );
+      }
+      if (opc2 == 0x21b) { // evorc
+
+        assign ( rT0L, unop(  Iop_Not32, mkexpr ( rBL ) ) );
+        assign ( rT0U, unop(  Iop_Not32, mkexpr ( rBU ) ) );
+
+        assign ( rDL,  binop( Iop_Or32, mkexpr ( rAL ), mkexpr ( rT0L ) ) );
+        assign ( rDU,  binop( Iop_Or32, mkexpr ( rAU ), mkexpr ( rT0U ) ) );
+      }
+      if (opc2 == 0x21e) { // evnand
+
+        assign ( rT0L, binop( Iop_And32, mkexpr ( rAL ), mkexpr ( rBL ) ) );
+        assign ( rT0U, binop( Iop_And32, mkexpr ( rAU ), mkexpr ( rBU ) ) );
+
+        assign ( rDL, unop( Iop_Not32, mkexpr ( rT0L ) ) );
+        assign ( rDU, unop( Iop_Not32, mkexpr ( rT0U ) ) );
+      }
+
       assign ( rD,  binop( Iop_32HLto64, mkexpr ( rDU ), mkexpr ( rDL ) ) );
       putSPEReg( rD_addr, mkexpr ( rD ) );
       break;
+   default:
+      return False;
    }
    return True;
 }
@@ -18402,8 +18485,14 @@ DisResult disInstr_PPC_WRK (
          if (!allow_SPE) goto decode_noSPE;
          if (dis_spe_store( theInstr )) goto decode_success;
          goto decode_failure;
+      case 0x211: // evand
+      case 0x212: // evandc
       case 0x216: // evxor
       case 0x217: // evor
+      case 0x218: // evnor
+      case 0x219: // eveqv
+      case 0x21b: // evorc
+      case 0x21e: // evnand
          if (!allow_SPE) goto decode_noSPE;
          if (dis_spe_bitwise( theInstr )) goto decode_success;
          goto decode_failure;
diff --git a/memcheck/tests/ppc32/test_spe.c b/memcheck/tests/ppc32/test_spe.c
index 78555b5..e16180e 100644
--- a/memcheck/tests/ppc32/test_spe.c
+++ b/memcheck/tests/ppc32/test_spe.c
@@ -2958,6 +2958,158 @@ int evmergelohi_asm(void)
 }
 TEST_SPE_DECL(evmergelohi_asm, "evmergelohi");
 
+int evand_asm(void)
+{
+  int failures = 0;
+#ifdef __SPE__
+  register __ev64_u32__ regA asm ("30");
+  register __ev64_u32__ regB asm ("29");
+  register __ev64_u32__ regD asm ("28");
+  int i;
+
+  for (i = 0; i < NELTS(rA2u32); i++) {
+
+    regA = rA2u32[i];
+    regB = rB2u32[i];
+    asm volatile ("evand %[d], %[a], %[b]" : [d] "=r" (regD) : [a] "r" (regA), [b] "r" (regB));
+    VERIFY(regD[0] == AND(regA[0], regB[0]) &&
+           regD[1] == AND(regA[1], regB[1]));
+  }
+#endif // __SPE__
+  return failures;
+}
+TEST_SPE_DECL(evand_asm, "evand");
+
+int evandc_asm(void)
+{
+  int failures = 0;
+#ifdef __SPE__
+  register __ev64_u32__ regA asm ("30");
+  register __ev64_u32__ regB asm ("29");
+  register __ev64_u32__ regD asm ("28");
+  int i;
+
+  for (i = 0; i < NELTS(rA2u32); i++) {
+
+    regA = rA2u32[i];
+    regB = rB2u32[i];
+    asm volatile ("evandc %[d], %[a], %[b]" : [d] "=r" (regD) : [a] "r" (regA), [b] "r" (regB));
+    VERIFY(regD[0] == ANDC(regA[0], regB[0]) &&
+           regD[1] == ANDC(regA[1], regB[1]));
+  }
+#endif // __SPE__
+  return failures;
+}
+TEST_SPE_DECL(evandc_asm, "evandc");
+
+int eveqv_asm(void)
+{
+  int failures = 0;
+#ifdef __SPE__
+  register __ev64_u32__ regA asm ("30");
+  register __ev64_u32__ regB asm ("29");
+  register __ev64_u32__ regD asm ("28");
+  int i;
+
+  for (i = 0; i < NELTS(rA2u32); i++) {
+
+    regA = rA2u32[i];
+    regB = rB2u32[i];
+    asm volatile ("eveqv %[d], %[a], %[b]" : [d] "=r" (regD) : [a] "r" (regA), [b] "r" (regB));
+    VERIFY(regD[0] == XNOR(regA[0], regB[0]) &&
+           regD[1] == XNOR(regA[1], regB[1]));
+  }
+#endif // __SPE__
+  return failures;
+}
+TEST_SPE_DECL(eveqv_asm, "eveqv");
+
+int evnand_asm(void)
+{
+  int failures = 0;
+#ifdef __SPE__
+  register __ev64_u32__ regA asm ("30");
+  register __ev64_u32__ regB asm ("29");
+  register __ev64_u32__ regD asm ("28");
+  int i;
+
+  for (i = 0; i < NELTS(rA2u32); i++) {
+
+    regA = rA2u32[i];
+    regB = rB2u32[i];
+    asm volatile ("evnand %[d], %[a], %[b]" : [d] "=r" (regD) : [a] "r" (regA), [b] "r" (regB));
+    VERIFY(regD[0] == NAND(regA[0], regB[0]) &&
+           regD[1] == NAND(regA[1], regB[1]));
+  }
+#endif // __SPE__
+  return failures;
+}
+TEST_SPE_DECL(evnand_asm, "evnand");
+
+int evnor_asm(void)
+{
+  int failures = 0;
+#ifdef __SPE__
+  register __ev64_u32__ regA asm ("30");
+  register __ev64_u32__ regB asm ("29");
+  register __ev64_u32__ regD asm ("28");
+  int i;
+
+  for (i = 0; i < NELTS(rA2u32); i++) {
+
+    regA = rA2u32[i];
+    regB = rB2u32[i];
+    asm volatile ("evnor %[d], %[a], %[b]" : [d] "=r" (regD) : [a] "r" (regA), [b] "r" (regB));
+    VERIFY(regD[0] == NOR(regA[0], regB[0]) &&
+           regD[1] == NOR(regA[1], regB[1]));
+  }
+#endif // __SPE__
+  return failures;
+}
+TEST_SPE_DECL(evnor_asm, "evnor");
+
+int evnot_asm(void)
+{
+  int failures = 0;
+#ifdef __SPE__
+  register __ev64_u32__ regA asm ("30");
+  register __ev64_u32__ regD asm ("29");
+  int i;
+
+  for (i = 0; i < NELTS(rB2u32); i++) {
+
+    regA = rB2u32[i];
+    // evnot rD, rA equivalent to evnor rD, rA, rA
+    asm volatile ("evnot %[d], %[a]" : [d] "=r" (regD) : [a] "r" (regA));
+    VERIFY(regD[0] == NOT(regA[0]));
+  }
+#endif // __SPE__
+  return failures;
+}
+TEST_SPE_DECL(evnot_asm, "evnot");
+
+int evorc_asm(void)
+{
+  int failures = 0;
+#ifdef __SPE__
+  register __ev64_u32__ regA asm ("30");
+  register __ev64_u32__ regB asm ("29");
+  register __ev64_u32__ regD asm ("28");
+  int i;
+
+  for (i = 0; i < NELTS(rA2u32); i++) {
+
+    regA = rA2u32[i];
+    regB = rB2u32[i];
+    asm volatile ("evorc %[d], %[a], %[b]" : [d] "=r" (regD) : [a] "r" (regA), [b] "r" (regB));
+    VERIFY(regD[0] == ORC(regA[0], regB[0]) &&
+           regD[1] == ORC(regA[1], regB[1]));
+  }
+#endif // __SPE__
+  return failures;
+}
+TEST_SPE_DECL(evorc_asm, "evorc");
+
 /* NOTE: To avoid having to remaster the .exp files entirely, add
  *       new test functions /just above/ this comment.
  *       That way, you only need to worry about the test that you
@@ -3049,6 +3201,13 @@ test_t spe_isa_bitwise_operators_test_table = {
     F(evmr_asm),
     F(evor_asm),
     F(evxor_asm),
+    F(evand_asm),
+    F(evandc_asm),
+    F(eveqv_asm),
+    F(evnand_asm),
+    F(evnor_asm),
+    F(evnot_asm),
+    F(evorc_asm),
     NULL
   }
 };
diff --git a/memcheck/tests/ppc32/test_spe.h b/memcheck/tests/ppc32/test_spe.h
index 6e8a689..d5e895c 100644
--- a/memcheck/tests/ppc32/test_spe.h
+++ b/memcheck/tests/ppc32/test_spe.h
@@ -4889,3 +4889,11 @@ const signed short rA1s16[] = {
 };
 
 signed short rD1s16[NELTS(rA1s16)];
+
+#define AND(a, b)  ((a) & (b))
+#define ANDC(a, b) ((a) & ~(b))
+#define XNOR(a, b) (((a) & (b)) | (~(a) & ~(b)))
+#define NAND(a, b) (~((a) & (b)))
+#define NOR(a, b)  (~((a) | (b)))
+#define NOT(a)     (~(a))
+#define ORC(a, b)  ((a) | ~(b))
diff --git a/memcheck/tests/ppc32/test_spe.stderr.exp b/memcheck/tests/ppc32/test_spe.stderr.exp
index 6aeed71..169747e 100644
--- a/memcheck/tests/ppc32/test_spe.stderr.exp
+++ b/memcheck/tests/ppc32/test_spe.stderr.exp
@@ -5,7 +5,7 @@ Invalid write of size 4
    by 0x........: run (test_spe.h:42)
    by 0x........: run (test_spe.h:48)
    by 0x........: run (test_spe.h:48)
-   by 0x........: main (test_spe.c:3136)
+   by 0x........: main (test_spe.c:3295)
  Address 0x........ is 0 bytes after a block of size 40 alloc'd
    at 0x........: malloc (vg_replace_malloc.c:...)
    by 0x........: vg_quick_start_guide_aux (test_spe.c:26)
@@ -13,7 +13,7 @@ Invalid write of size 4
    by 0x........: run (test_spe.h:42)
    by 0x........: run (test_spe.h:48)
    by 0x........: run (test_spe.h:48)
-   by 0x........: main (test_spe.c:3136)
+   by 0x........: main (test_spe.c:3295)
 
 
 HEAP SUMMARY:
@@ -27,7 +27,7 @@ HEAP SUMMARY:
    by 0x........: run (test_spe.h:42)
    by 0x........: run (test_spe.h:48)
    by 0x........: run (test_spe.h:48)
-   by 0x........: main (test_spe.c:3136)
+   by 0x........: main (test_spe.c:3295)
 
 LEAK SUMMARY:
    definitely lost: 40 bytes in 1 blocks
diff --git a/memcheck/tests/ppc32/test_spe.stdout.exp b/memcheck/tests/ppc32/test_spe.stdout.exp
index 755e321..f1dd397 100644
--- a/memcheck/tests/ppc32/test_spe.stdout.exp
+++ b/memcheck/tests/ppc32/test_spe.stdout.exp
@@ -54,6 +54,13 @@ SPE Regression Tests: PASS
 ....evmr: PASS
 ....evor: PASS
 ....evxor: PASS
+....evand: PASS
+....evandc: PASS
+....eveqv: PASS
+....evnand: PASS
+....evnor: PASS
+....evnot: PASS
+....evorc: PASS
 ...SPE ISA Merge Instructions Tests: PASS
 ....evmergehi: PASS
 ....evmergehilo: PASS
diff --git a/regtest-power7-64.log b/regtest-power7-64.log
index e171d1c..94291b8 100644
--- a/regtest-power7-64.log
+++ b/regtest-power7-64.log
@@ -461,7 +461,7 @@ gcc -Winline -Wall -Wshadow -g -m64 -gdwarf-4 -fdebug-types-section -Wno-long-lo
 make[5]: Leaving directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/memcheck/tests'
 make  check-local
 make[5]: Entering directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/memcheck/tests'
-make[5]: Warning: File `.deps/xml1.Po' has modification time 67 s in the future
+make[5]: Warning: File `.deps/xml1.Po' has modification time 68 s in the future
 for f in ; do \
   if [ ! -e $f.dSYM  -o  $f -nt $f.dSYM ] ; then \
       echo "dsymutil $f"; \
@@ -1863,7 +1863,7 @@ gcc -Winline -Wall -Wshadow -g -O -m64 -Wno-shadow -Wno-inline -Wno-long-long  -
 make[3]: Leaving directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/perf'
 make  check-local
 make[3]: Entering directory `/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/perf'
-make[3]: Warning: File `.deps/tinycc-tinycc.Po' has modification time 71 s in the future
+make[3]: Warning: File `.deps/tinycc-tinycc.Po' has modification time 72 s in the future
 for f in ; do \
   if [ ! -e $f.dSYM  -o  $f -nt $f.dSYM ] ; then \
       echo "dsymutil $f"; \
@@ -1980,7 +1980,7 @@ badfree-2trace:  valgrind   --num-callers=2 -q ./badfree
 badfree:         valgrind   -q ./badfree 
 badfree3:        valgrind   -q --fullpath-after=/proj/ppc/DT/labhome/anmol/valgrind-3.8.1/ ./badfree 
 badjump:         valgrind   ./badjump 
-sh: line 1: 29261 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck ./badjump > badjump.stdout.out 2> badjump.stderr.out
+sh: line 1:  8513 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck ./badjump > badjump.stdout.out 2> badjump.stderr.out
 badjump2:        valgrind   -q ./badjump2 
 badloop:         valgrind   -q ./badloop 
 badpoll:         valgrind   -q ./badpoll 
@@ -1997,7 +1997,7 @@ clo_redzone_default: valgrind   --leak-check=no -q ./clo_redzone
 custom-overlap:  valgrind   --leak-check=summary -q ./custom-overlap 
 custom_alloc:    valgrind   -q ./custom_alloc 
 deep-backtrace:  valgrind   -q --num-callers=500 ./deep-backtrace 
-sh: line 1: 29820 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck -q --num-callers=500 ./deep-backtrace > deep-backtrace.stdout.out 2> deep-backtrace.stderr.out
+sh: line 1:  9073 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck -q --num-callers=500 ./deep-backtrace > deep-backtrace.stdout.out 2> deep-backtrace.stderr.out
 deep_templates:  valgrind   -q ./deep_templates 
 describe-block:  valgrind   ./describe-block 
 doublefree:      valgrind   -q ./doublefree 
@@ -2110,7 +2110,7 @@ supp-dir:        valgrind   --suppressions=x86/ ./../../tests/true
 supp1:           valgrind   --suppressions=supp.supp -q ./supp1 
 supp2:           valgrind   --suppressions=supp.supp -q ./supp2 
 supp_unknown:    valgrind   -q --suppressions=supp_unknown.supp ./badjump 
-sh: line 1:  2173 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck -q --suppressions=supp_unknown.supp ./badjump > supp_unknown.stdout.out 2> supp_unknown.stderr.out
+sh: line 1: 13806 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=memcheck -q --suppressions=supp_unknown.supp ./badjump > supp_unknown.stdout.out 2> supp_unknown.stderr.out
 *** supp_unknown failed (stderr) ***
 suppfree:        valgrind   --suppressions=suppfree.supp -q ./suppfree 
 test-plo-no:     valgrind   -q ./test-plo 
@@ -2246,7 +2246,7 @@ gxx304:          valgrind   ./gxx304
 ifunc:           (skipping, prereq failed: test -e ifunc)
 -- Running  tests in none/tests/linux ----------------------------------
 blockfault:      valgrind   ./blockfault 
-sh: line 1:  6655 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=none ./blockfault > blockfault.stdout.out 2> blockfault.stderr.out
+sh: line 1: 18281 Segmentation fault      (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=none ./blockfault > blockfault.stdout.out 2> blockfault.stderr.out
 mremap:          valgrind   ./mremap 
 mremap2:         valgrind   ./mremap2 
 mremap3:         valgrind   ./mremap3 
@@ -2412,7 +2412,7 @@ tc20_verifywrap: valgrind   --read-var-info=yes ./tc20_verifywrap
 *** tc20_verifywrap failed (stderr) ***
 tc21_pthonce:    valgrind   --read-var-info=yes ./tc21_pthonce 
 tc22_exit_w_lock: valgrind   ./tc22_exit_w_lock 
-sh: line 1: 24136 Aborted                 (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=helgrind ./tc22_exit_w_lock > tc22_exit_w_lock.stdout.out 2> tc22_exit_w_lock.stderr.out
+sh: line 1:  3381 Aborted                 (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=helgrind ./tc22_exit_w_lock > tc22_exit_w_lock.stdout.out 2> tc22_exit_w_lock.stderr.out
 tc23_bogus_condwait: valgrind   ./tc23_bogus_condwait 
 tc24_nonzero_sem: valgrind   --hg-sanity-flags=111111 ./tc24_nonzero_sem 
 -- Finished tests in helgrind/tests ------------------------------------
@@ -2531,7 +2531,7 @@ tc18_semabuse:   valgrind   ./../../helgrind/tests/tc18_semabuse
 tc19_shadowmem:  valgrind   --error-limit=no --read-var-info=yes --show-confl-seg=no --num-callers=3 ./../../helgrind/tests/tc19_shadowmem 
 tc21_pthonce:    valgrind   --num-callers=3 ./../../helgrind/tests/tc21_pthonce 
 tc22_exit_w_lock: valgrind   --num-callers=3 ./../../helgrind/tests/tc22_exit_w_lock 
-sh: line 1: 29496 Aborted                 (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=drd --num-callers=3 ./../../helgrind/tests/tc22_exit_w_lock > tc22_exit_w_lock.stdout.out 2> tc22_exit_w_lock.stderr.out
+sh: line 1:  8734 Aborted                 (core dumped) VALGRIND_LIB=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place VALGRIND_LIB_INNER=/proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/.in_place /proj/.ppc_DT_labhome/labhome/anmol/valgrind-3.8.1/./coregrind/valgrind --command-line-only=yes --memcheck:leak-check=no --tool=drd --num-callers=3 ./../../helgrind/tests/tc22_exit_w_lock > tc22_exit_w_lock.stdout.out 2> tc22_exit_w_lock.stderr.out
 tc23_bogus_condwait: valgrind   --num-callers=3 ./../../helgrind/tests/tc23_bogus_condwait 
 tc24_nonzero_sem: valgrind   --read-var-info=yes ./../../helgrind/tests/tc24_nonzero_sem 
 thread_name:     valgrind   --read-var-info=yes --check-stack-var=yes --num-callers=3 ./thread_name 
-- 
1.7.3.4

